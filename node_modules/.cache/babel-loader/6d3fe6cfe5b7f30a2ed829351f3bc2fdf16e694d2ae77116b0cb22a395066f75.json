{"ast":null,"code":"import _slicedToArray from \"/Users/guilherme/Downloads/react-loan-calculator-main/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nvar _excluded = [\"style\"];\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { useForkRef, unstable_useEnhancedEffect as useEnhancedEffect } from '@mui/material/utils';\nimport { useGridApiContext } from '../../utils/useGridApiContext';\nimport { useGridRootProps } from '../../utils/useGridRootProps';\nimport { useGridSelector } from '../../utils/useGridSelector';\nimport { gridVisibleColumnDefinitionsSelector, gridColumnsTotalWidthSelector, gridColumnPositionsSelector } from '../columns/gridColumnsSelector';\nimport { gridDensityRowHeightSelector } from '../density/densitySelector';\nimport { gridFocusCellSelector, gridTabIndexCellSelector } from '../focus/gridFocusStateSelector';\nimport { gridEditRowsStateSelector } from '../editRows/gridEditRowsSelector';\nimport { useGridVisibleRows } from '../../utils/useGridVisibleRows';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { clamp } from '../../../utils/utils';\nimport { selectedIdsLookupSelector } from '../selection/gridSelectionSelector';\nimport { gridRowsMetaSelector } from '../rows/gridRowsMetaSelector';\nimport { getFirstNonSpannedColumnToRender } from '../columns/gridColumnsUtils'; // Uses binary search to avoid looping through all possible positions\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport function binarySearch(offset, positions) {\n  var sliceStart = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  var sliceEnd = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : positions.length;\n  if (positions.length <= 0) {\n    return -1;\n  }\n  if (sliceStart >= sliceEnd) {\n    return sliceStart;\n  }\n  var pivot = sliceStart + Math.floor((sliceEnd - sliceStart) / 2);\n  var itemOffset = positions[pivot];\n  return offset <= itemOffset ? binarySearch(offset, positions, sliceStart, pivot) : binarySearch(offset, positions, pivot + 1, sliceEnd);\n}\nfunction exponentialSearch(offset, positions, index) {\n  var interval = 1;\n  while (index < positions.length && positions[index] < offset) {\n    index += interval;\n    interval *= 2;\n  }\n  return binarySearch(offset, positions, Math.floor(index / 2), Math.min(index, positions.length));\n}\nexport var getRenderableIndexes = function getRenderableIndexes(_ref2) {\n  var firstIndex = _ref2.firstIndex,\n    lastIndex = _ref2.lastIndex,\n    buffer = _ref2.buffer,\n    minFirstIndex = _ref2.minFirstIndex,\n    maxLastIndex = _ref2.maxLastIndex;\n  return [clamp(firstIndex - buffer, minFirstIndex, maxLastIndex), clamp(lastIndex + buffer, minFirstIndex, maxLastIndex)];\n};\nvar areRenderContextsEqual = function areRenderContextsEqual(context1, context2) {\n  if (context1 === context2) {\n    return true;\n  }\n  return context1.firstRowIndex === context2.firstRowIndex && context1.lastRowIndex === context2.lastRowIndex && context1.firstColumnIndex === context2.firstColumnIndex && context1.lastColumnIndex === context2.lastColumnIndex;\n};\nexport var useGridVirtualScroller = function useGridVirtualScroller(props) {\n  var _currentPage$range3, _currentPage$range4;\n  var apiRef = useGridApiContext();\n  var rootProps = useGridRootProps();\n  var visibleColumns = useGridSelector(apiRef, gridVisibleColumnDefinitionsSelector);\n  var ref = props.ref,\n    disableVirtualization = props.disableVirtualization,\n    onRenderZonePositioning = props.onRenderZonePositioning,\n    _props$renderZoneMinC = props.renderZoneMinColumnIndex,\n    renderZoneMinColumnIndex = _props$renderZoneMinC === void 0 ? 0 : _props$renderZoneMinC,\n    _props$renderZoneMaxC = props.renderZoneMaxColumnIndex,\n    renderZoneMaxColumnIndex = _props$renderZoneMaxC === void 0 ? visibleColumns.length : _props$renderZoneMaxC,\n    getRowProps = props.getRowProps;\n  var columnPositions = useGridSelector(apiRef, gridColumnPositionsSelector);\n  var columnsTotalWidth = useGridSelector(apiRef, gridColumnsTotalWidthSelector);\n  var rowHeight = useGridSelector(apiRef, gridDensityRowHeightSelector);\n  var cellFocus = useGridSelector(apiRef, gridFocusCellSelector);\n  var cellTabIndex = useGridSelector(apiRef, gridTabIndexCellSelector);\n  var rowsMeta = useGridSelector(apiRef, gridRowsMetaSelector);\n  var editRowsState = useGridSelector(apiRef, gridEditRowsStateSelector);\n  var selectedRowsLookup = useGridSelector(apiRef, selectedIdsLookupSelector);\n  var currentPage = useGridVisibleRows(apiRef, rootProps);\n  var renderZoneRef = React.useRef(null);\n  var rootRef = React.useRef(null);\n  var handleRef = useForkRef(ref, rootRef);\n  var _React$useState = React.useState(null),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    renderContext = _React$useState2[0],\n    setRenderContext = _React$useState2[1];\n  var prevRenderContext = React.useRef(renderContext);\n  var scrollPosition = React.useRef({\n    top: 0,\n    left: 0\n  });\n  var _React$useState3 = React.useState({\n      width: null,\n      height: null\n    }),\n    _React$useState4 = _slicedToArray(_React$useState3, 2),\n    containerDimensions = _React$useState4[0],\n    setContainerDimensions = _React$useState4[1];\n  var prevTotalWidth = React.useRef(columnsTotalWidth);\n  var getNearestIndexToRender = React.useCallback(function (offset) {\n    var _currentPage$range, _currentPage$range2;\n    var lastMeasuredIndexRelativeToAllRows = apiRef.current.unstable_getLastMeasuredRowIndex();\n    var allRowsMeasured = lastMeasuredIndexRelativeToAllRows === Infinity;\n    if ((_currentPage$range = currentPage.range) != null && _currentPage$range.lastRowIndex && !allRowsMeasured) {\n      // Check if all rows in this page are already measured\n      allRowsMeasured = lastMeasuredIndexRelativeToAllRows >= currentPage.range.lastRowIndex;\n    }\n    var lastMeasuredIndexRelativeToCurrentPage = clamp(lastMeasuredIndexRelativeToAllRows - (((_currentPage$range2 = currentPage.range) == null ? void 0 : _currentPage$range2.firstRowIndex) || 0), 0, rowsMeta.positions.length);\n    if (allRowsMeasured || rowsMeta.positions[lastMeasuredIndexRelativeToCurrentPage] >= offset) {\n      // If all rows were measured (when no row has \"auto\" as height) or all rows before the offset\n      // were measured, then use a binary search because it's faster.\n      return binarySearch(offset, rowsMeta.positions);\n    } // Otherwise, use an exponential search.\n    // If rows have \"auto\" as height, their positions will be based on estimated heights.\n    // In this case, we can skip several steps until we find a position higher than the offset.\n    // Inspired by https://github.com/bvaughn/react-virtualized/blob/master/source/Grid/utils/CellSizeAndPositionManager.js\n\n    return exponentialSearch(offset, rowsMeta.positions, lastMeasuredIndexRelativeToCurrentPage);\n  }, [apiRef, (_currentPage$range3 = currentPage.range) == null ? void 0 : _currentPage$range3.firstRowIndex, (_currentPage$range4 = currentPage.range) == null ? void 0 : _currentPage$range4.lastRowIndex, rowsMeta.positions]);\n  var computeRenderContext = React.useCallback(function () {\n    if (disableVirtualization) {\n      return {\n        firstRowIndex: 0,\n        lastRowIndex: currentPage.rows.length,\n        firstColumnIndex: 0,\n        lastColumnIndex: visibleColumns.length\n      };\n    }\n    var _scrollPosition$curre = scrollPosition.current,\n      top = _scrollPosition$curre.top,\n      left = _scrollPosition$curre.left; // Clamp the value because the search may return an index out of bounds.\n    // In the last index, this is not needed because Array.slice doesn't include it.\n\n    var firstRowIndex = Math.min(getNearestIndexToRender(top), rowsMeta.positions.length - 1);\n    var lastRowIndex = rootProps.autoHeight ? firstRowIndex + currentPage.rows.length : getNearestIndexToRender(top + containerDimensions.height);\n    var hasRowWithAutoHeight = false;\n    var firstColumnIndex = 0;\n    var lastColumnIndex = columnPositions.length;\n    var _getRenderableIndexes = getRenderableIndexes({\n        firstIndex: firstRowIndex,\n        lastIndex: lastRowIndex,\n        minFirstIndex: 0,\n        maxLastIndex: currentPage.rows.length,\n        buffer: rootProps.rowBuffer\n      }),\n      _getRenderableIndexes2 = _slicedToArray(_getRenderableIndexes, 2),\n      firstRowToRender = _getRenderableIndexes2[0],\n      lastRowToRender = _getRenderableIndexes2[1];\n    for (var i = firstRowToRender; i < lastRowToRender && !hasRowWithAutoHeight; i += 1) {\n      var row = currentPage.rows[i];\n      hasRowWithAutoHeight = apiRef.current.unstable_rowHasAutoHeight(row.id);\n    }\n    if (!hasRowWithAutoHeight) {\n      firstColumnIndex = binarySearch(left, columnPositions);\n      lastColumnIndex = binarySearch(left + containerDimensions.width, columnPositions);\n    }\n    return {\n      firstRowIndex: firstRowIndex,\n      lastRowIndex: lastRowIndex,\n      firstColumnIndex: firstColumnIndex,\n      lastColumnIndex: lastColumnIndex\n    };\n  }, [disableVirtualization, getNearestIndexToRender, rowsMeta.positions.length, rootProps.autoHeight, rootProps.rowBuffer, currentPage.rows, columnPositions, visibleColumns.length, apiRef, containerDimensions]);\n  useEnhancedEffect(function () {\n    if (disableVirtualization) {\n      renderZoneRef.current.style.transform = \"translate3d(0px, 0px, 0px)\";\n    } else {\n      // TODO a scroll reset should not be necessary\n      rootRef.current.scrollLeft = 0;\n      rootRef.current.scrollTop = 0;\n    }\n  }, [disableVirtualization]);\n  useEnhancedEffect(function () {\n    setContainerDimensions({\n      width: rootRef.current.clientWidth,\n      height: rootRef.current.clientHeight\n    });\n  }, [rowsMeta.currentPageTotalHeight]);\n  var handleResize = React.useCallback(function (params) {\n    setContainerDimensions({\n      width: params.width,\n      height: params.height\n    });\n  }, []);\n  useGridApiEventHandler(apiRef, 'resize', handleResize);\n  var updateRenderZonePosition = React.useCallback(function (nextRenderContext) {\n    var _getRenderableIndexes3 = getRenderableIndexes({\n        firstIndex: nextRenderContext.firstRowIndex,\n        lastIndex: nextRenderContext.lastRowIndex,\n        minFirstIndex: 0,\n        maxLastIndex: currentPage.rows.length,\n        buffer: rootProps.rowBuffer\n      }),\n      _getRenderableIndexes4 = _slicedToArray(_getRenderableIndexes3, 2),\n      firstRowToRender = _getRenderableIndexes4[0],\n      lastRowToRender = _getRenderableIndexes4[1];\n    var _getRenderableIndexes5 = getRenderableIndexes({\n        firstIndex: nextRenderContext.firstColumnIndex,\n        lastIndex: nextRenderContext.lastColumnIndex,\n        minFirstIndex: renderZoneMinColumnIndex,\n        maxLastIndex: renderZoneMaxColumnIndex,\n        buffer: rootProps.columnBuffer\n      }),\n      _getRenderableIndexes6 = _slicedToArray(_getRenderableIndexes5, 1),\n      initialFirstColumnToRender = _getRenderableIndexes6[0];\n    var firstColumnToRender = getFirstNonSpannedColumnToRender({\n      firstColumnToRender: initialFirstColumnToRender,\n      apiRef: apiRef,\n      firstRowToRender: firstRowToRender,\n      lastRowToRender: lastRowToRender,\n      visibleRows: currentPage.rows\n    });\n    var top = gridRowsMetaSelector(apiRef.current.state).positions[firstRowToRender];\n    var left = gridColumnPositionsSelector(apiRef)[firstColumnToRender]; // Call directly the selector because it might be outdated when this method is called\n\n    renderZoneRef.current.style.transform = \"translate3d(\".concat(left, \"px, \").concat(top, \"px, 0px)\");\n    if (typeof onRenderZonePositioning === 'function') {\n      onRenderZonePositioning({\n        top: top,\n        left: left\n      });\n    }\n  }, [apiRef, currentPage.rows, onRenderZonePositioning, renderZoneMinColumnIndex, renderZoneMaxColumnIndex, rootProps.columnBuffer, rootProps.rowBuffer]);\n  var updateRenderContext = React.useCallback(function (nextRenderContext) {\n    if (prevRenderContext.current && areRenderContextsEqual(nextRenderContext, prevRenderContext.current)) {\n      updateRenderZonePosition(nextRenderContext);\n      return;\n    }\n    setRenderContext(nextRenderContext);\n    updateRenderZonePosition(nextRenderContext);\n    var _getRenderableIndexes7 = getRenderableIndexes({\n        firstIndex: nextRenderContext.firstRowIndex,\n        lastIndex: nextRenderContext.lastRowIndex,\n        minFirstIndex: 0,\n        maxLastIndex: currentPage.rows.length,\n        buffer: rootProps.rowBuffer\n      }),\n      _getRenderableIndexes8 = _slicedToArray(_getRenderableIndexes7, 2),\n      firstRowToRender = _getRenderableIndexes8[0],\n      lastRowToRender = _getRenderableIndexes8[1];\n    apiRef.current.publishEvent('renderedRowsIntervalChange', {\n      firstRowToRender: firstRowToRender,\n      lastRowToRender: lastRowToRender\n    });\n    prevRenderContext.current = nextRenderContext;\n  }, [apiRef, setRenderContext, prevRenderContext, currentPage.rows.length, rootProps.rowBuffer, updateRenderZonePosition]);\n  useEnhancedEffect(function () {\n    if (containerDimensions.width == null) {\n      return;\n    }\n    var initialRenderContext = computeRenderContext();\n    updateRenderContext(initialRenderContext);\n    var _scrollPosition$curre2 = scrollPosition.current,\n      top = _scrollPosition$curre2.top,\n      left = _scrollPosition$curre2.left;\n    var params = {\n      top: top,\n      left: left,\n      renderContext: initialRenderContext\n    };\n    apiRef.current.publishEvent('rowsScroll', params);\n  }, [apiRef, computeRenderContext, containerDimensions.width, updateRenderContext]);\n  var handleScroll = function handleScroll(event) {\n    var _event$currentTarget = event.currentTarget,\n      scrollTop = _event$currentTarget.scrollTop,\n      scrollLeft = _event$currentTarget.scrollLeft;\n    scrollPosition.current.top = scrollTop;\n    scrollPosition.current.left = scrollLeft; // On iOS and macOS, negative offsets are possible when swiping past the start\n\n    if (scrollLeft < 0 || scrollTop < 0 || !prevRenderContext.current) {\n      return;\n    } // When virtualization is disabled, the context never changes during scroll\n\n    var nextRenderContext = disableVirtualization ? prevRenderContext.current : computeRenderContext();\n    var topRowsScrolledSincePreviousRender = Math.abs(nextRenderContext.firstRowIndex - prevRenderContext.current.firstRowIndex);\n    var bottomRowsScrolledSincePreviousRender = Math.abs(nextRenderContext.lastRowIndex - prevRenderContext.current.lastRowIndex);\n    var topColumnsScrolledSincePreviousRender = Math.abs(nextRenderContext.firstColumnIndex - prevRenderContext.current.firstColumnIndex);\n    var bottomColumnsScrolledSincePreviousRender = Math.abs(nextRenderContext.lastColumnIndex - prevRenderContext.current.lastColumnIndex);\n    var shouldSetState = topRowsScrolledSincePreviousRender >= rootProps.rowThreshold || bottomRowsScrolledSincePreviousRender >= rootProps.rowThreshold || topColumnsScrolledSincePreviousRender >= rootProps.columnThreshold || bottomColumnsScrolledSincePreviousRender >= rootProps.columnThreshold || prevTotalWidth.current !== columnsTotalWidth; // TODO v6: rename event to a wider name, it's not only fired for row scrolling\n\n    apiRef.current.publishEvent('rowsScroll', {\n      top: scrollTop,\n      left: scrollLeft,\n      renderContext: shouldSetState ? nextRenderContext : prevRenderContext.current\n    }, event);\n    if (shouldSetState) {\n      // Prevents batching render context changes\n      ReactDOM.flushSync(function () {\n        updateRenderContext(nextRenderContext);\n      });\n      prevTotalWidth.current = columnsTotalWidth;\n    }\n  };\n  var handleWheel = function handleWheel(event) {\n    apiRef.current.publishEvent('virtualScrollerWheel', {}, event);\n  };\n  var handleTouchMove = function handleTouchMove(event) {\n    apiRef.current.publishEvent('virtualScrollerTouchMove', {}, event);\n  };\n  var getRows = function getRows() {\n    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      renderContext: renderContext\n    };\n    var nextRenderContext = params.renderContext,\n      _params$minFirstColum = params.minFirstColumn,\n      minFirstColumn = _params$minFirstColum === void 0 ? renderZoneMinColumnIndex : _params$minFirstColum,\n      _params$maxLastColumn = params.maxLastColumn,\n      maxLastColumn = _params$maxLastColumn === void 0 ? renderZoneMaxColumnIndex : _params$maxLastColumn,\n      _params$availableSpac = params.availableSpace,\n      availableSpace = _params$availableSpac === void 0 ? containerDimensions.width : _params$availableSpac,\n      _params$rowIndexOffse = params.rowIndexOffset,\n      rowIndexOffset = _params$rowIndexOffse === void 0 ? 0 : _params$rowIndexOffse,\n      _params$position = params.position,\n      position = _params$position === void 0 ? 'center' : _params$position;\n    if (!nextRenderContext || availableSpace == null) {\n      return null;\n    }\n    var rowBuffer = !disableVirtualization ? rootProps.rowBuffer : 0;\n    var columnBuffer = !disableVirtualization ? rootProps.columnBuffer : 0;\n    var _getRenderableIndexes9 = getRenderableIndexes({\n        firstIndex: nextRenderContext.firstRowIndex,\n        lastIndex: nextRenderContext.lastRowIndex,\n        minFirstIndex: 0,\n        maxLastIndex: currentPage.rows.length,\n        buffer: rowBuffer\n      }),\n      _getRenderableIndexes10 = _slicedToArray(_getRenderableIndexes9, 2),\n      firstRowToRender = _getRenderableIndexes10[0],\n      lastRowToRender = _getRenderableIndexes10[1];\n    var renderedRows = [];\n    if (params.rows) {\n      params.rows.forEach(function (row) {\n        renderedRows.push(row);\n        apiRef.current.unstable_calculateColSpan({\n          rowId: row.id,\n          minFirstColumn: minFirstColumn,\n          maxLastColumn: maxLastColumn,\n          columns: visibleColumns\n        });\n      });\n    } else {\n      if (!currentPage.range) {\n        return null;\n      }\n      for (var i = firstRowToRender; i < lastRowToRender; i += 1) {\n        var row = currentPage.rows[i];\n        renderedRows.push(row);\n        apiRef.current.unstable_calculateColSpan({\n          rowId: row.id,\n          minFirstColumn: minFirstColumn,\n          maxLastColumn: maxLastColumn,\n          columns: visibleColumns\n        });\n      }\n    }\n    var _getRenderableIndexes11 = getRenderableIndexes({\n        firstIndex: nextRenderContext.firstColumnIndex,\n        lastIndex: nextRenderContext.lastColumnIndex,\n        minFirstIndex: minFirstColumn,\n        maxLastIndex: maxLastColumn,\n        buffer: columnBuffer\n      }),\n      _getRenderableIndexes12 = _slicedToArray(_getRenderableIndexes11, 2),\n      initialFirstColumnToRender = _getRenderableIndexes12[0],\n      lastColumnToRender = _getRenderableIndexes12[1];\n    var firstColumnToRender = getFirstNonSpannedColumnToRender({\n      firstColumnToRender: initialFirstColumnToRender,\n      apiRef: apiRef,\n      firstRowToRender: firstRowToRender,\n      lastRowToRender: lastRowToRender,\n      visibleRows: currentPage.rows\n    });\n    var renderedColumns = visibleColumns.slice(firstColumnToRender, lastColumnToRender);\n    var rows = [];\n    for (var _i = 0; _i < renderedRows.length; _i += 1) {\n      var _currentPage$range5, _rootProps$components;\n      var _renderedRows$_i = renderedRows[_i],\n        id = _renderedRows$_i.id,\n        model = _renderedRows$_i.model;\n      var lastVisibleRowIndex = firstRowToRender + _i === currentPage.rows.length - 1;\n      var baseRowHeight = !apiRef.current.unstable_rowHasAutoHeight(id) ? apiRef.current.unstable_getRowHeight(id) : 'auto';\n      var isSelected = void 0;\n      if (selectedRowsLookup[id] == null) {\n        isSelected = false;\n      } else {\n        isSelected = apiRef.current.isRowSelectable(id);\n      }\n      rows.push( /*#__PURE__*/_jsx(rootProps.components.Row, _extends({\n        row: model,\n        rowId: id,\n        rowHeight: baseRowHeight,\n        cellFocus: cellFocus // TODO move to inside the row\n        ,\n\n        cellTabIndex: cellTabIndex // TODO move to inside the row\n        ,\n\n        editRowsState: editRowsState // TODO move to inside the row\n        ,\n\n        renderedColumns: renderedColumns,\n        visibleColumns: visibleColumns,\n        firstColumnToRender: firstColumnToRender,\n        lastColumnToRender: lastColumnToRender,\n        selected: isSelected,\n        index: rowIndexOffset + ((currentPage == null ? void 0 : (_currentPage$range5 = currentPage.range) == null ? void 0 : _currentPage$range5.firstRowIndex) || 0) + firstRowToRender + _i,\n        containerWidth: availableSpace,\n        isLastVisible: lastVisibleRowIndex,\n        position: position\n      }, typeof getRowProps === 'function' ? getRowProps(id, model) : {}, (_rootProps$components = rootProps.componentsProps) == null ? void 0 : _rootProps$components.row), id));\n    }\n    return rows;\n  };\n  var needsHorizontalScrollbar = containerDimensions.width && columnsTotalWidth > containerDimensions.width;\n  var contentSize = React.useMemo(function () {\n    // In cases where the columns exceed the available width,\n    // the horizontal scrollbar should be shown even when there're no rows.\n    // Keeping 1px as minimum height ensures that the scrollbar will visible if necessary.\n    var height = Math.max(rowsMeta.currentPageTotalHeight, 1);\n    var shouldExtendContent = false;\n    if (rootRef != null && rootRef.current && height <= (rootRef == null ? void 0 : rootRef.current.clientHeight)) {\n      shouldExtendContent = true;\n    }\n    var size = {\n      width: needsHorizontalScrollbar ? columnsTotalWidth : 'auto',\n      height: height,\n      minHeight: shouldExtendContent ? '100%' : 'auto'\n    };\n    if (rootProps.autoHeight && currentPage.rows.length === 0) {\n      size.height = 2 * rowHeight; // Give room to show the overlay when there's no row.\n    }\n\n    return size;\n  }, [rootRef, columnsTotalWidth, rowsMeta.currentPageTotalHeight, currentPage.rows.length, needsHorizontalScrollbar, rootProps.autoHeight, rowHeight]);\n  React.useEffect(function () {\n    apiRef.current.publishEvent('virtualScrollerContentSizeChange');\n  }, [apiRef, contentSize]);\n  if (rootProps.autoHeight && currentPage.rows.length === 0) {\n    contentSize.height = 2 * rowHeight; // Give room to show the overlay when there no rows.\n  }\n\n  var rootStyle = {};\n  if (!needsHorizontalScrollbar) {\n    rootStyle.overflowX = 'hidden';\n  }\n  if (rootProps.autoHeight) {\n    rootStyle.overflowY = 'hidden';\n  }\n  var getRenderContext = React.useCallback(function () {\n    return prevRenderContext.current;\n  }, []);\n  apiRef.current.unstable_getRenderContext = getRenderContext;\n  return {\n    renderContext: renderContext,\n    updateRenderZonePosition: updateRenderZonePosition,\n    getRows: getRows,\n    getRootProps: function getRootProps() {\n      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var _ref$style = _ref.style,\n        style = _ref$style === void 0 ? {} : _ref$style,\n        other = _objectWithoutPropertiesLoose(_ref, _excluded);\n      return _extends({\n        ref: handleRef,\n        onScroll: handleScroll,\n        onWheel: handleWheel,\n        onTouchMove: handleTouchMove,\n        style: _extends({}, style, rootStyle)\n      }, other);\n    },\n    getContentProps: function getContentProps() {\n      var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        _ref3$style = _ref3.style,\n        style = _ref3$style === void 0 ? {} : _ref3$style;\n      return {\n        style: _extends({}, style, contentSize)\n      };\n    },\n    getRenderZoneProps: function getRenderZoneProps() {\n      return {\n        ref: renderZoneRef\n      };\n    }\n  };\n};","map":{"version":3,"names":["_objectWithoutPropertiesLoose","_extends","_excluded","React","ReactDOM","useForkRef","unstable_useEnhancedEffect","useEnhancedEffect","useGridApiContext","useGridRootProps","useGridSelector","gridVisibleColumnDefinitionsSelector","gridColumnsTotalWidthSelector","gridColumnPositionsSelector","gridDensityRowHeightSelector","gridFocusCellSelector","gridTabIndexCellSelector","gridEditRowsStateSelector","useGridVisibleRows","useGridApiEventHandler","clamp","selectedIdsLookupSelector","gridRowsMetaSelector","getFirstNonSpannedColumnToRender","jsx","_jsx","binarySearch","offset","positions","sliceStart","arguments","length","undefined","sliceEnd","pivot","Math","floor","itemOffset","exponentialSearch","index","interval","min","getRenderableIndexes","_ref2","firstIndex","lastIndex","buffer","minFirstIndex","maxLastIndex","areRenderContextsEqual","context1","context2","firstRowIndex","lastRowIndex","firstColumnIndex","lastColumnIndex","useGridVirtualScroller","props","_currentPage$range3","_currentPage$range4","apiRef","rootProps","visibleColumns","ref","disableVirtualization","onRenderZonePositioning","_props$renderZoneMinC","renderZoneMinColumnIndex","_props$renderZoneMaxC","renderZoneMaxColumnIndex","getRowProps","columnPositions","columnsTotalWidth","rowHeight","cellFocus","cellTabIndex","rowsMeta","editRowsState","selectedRowsLookup","currentPage","renderZoneRef","useRef","rootRef","handleRef","_React$useState","useState","_React$useState2","_slicedToArray","renderContext","setRenderContext","prevRenderContext","scrollPosition","top","left","_React$useState3","width","height","_React$useState4","containerDimensions","setContainerDimensions","prevTotalWidth","getNearestIndexToRender","useCallback","_currentPage$range","_currentPage$range2","lastMeasuredIndexRelativeToAllRows","current","unstable_getLastMeasuredRowIndex","allRowsMeasured","Infinity","range","lastMeasuredIndexRelativeToCurrentPage","computeRenderContext","rows","_scrollPosition$curre","autoHeight","hasRowWithAutoHeight","_getRenderableIndexes","rowBuffer","_getRenderableIndexes2","firstRowToRender","lastRowToRender","i","row","unstable_rowHasAutoHeight","id","style","transform","scrollLeft","scrollTop","clientWidth","clientHeight","currentPageTotalHeight","handleResize","params","updateRenderZonePosition","nextRenderContext","_getRenderableIndexes3","_getRenderableIndexes4","_getRenderableIndexes5","columnBuffer","_getRenderableIndexes6","initialFirstColumnToRender","firstColumnToRender","visibleRows","state","concat","updateRenderContext","_getRenderableIndexes7","_getRenderableIndexes8","publishEvent","initialRenderContext","_scrollPosition$curre2","handleScroll","event","_event$currentTarget","currentTarget","topRowsScrolledSincePreviousRender","abs","bottomRowsScrolledSincePreviousRender","topColumnsScrolledSincePreviousRender","bottomColumnsScrolledSincePreviousRender","shouldSetState","rowThreshold","columnThreshold","flushSync","handleWheel","handleTouchMove","getRows","_params$minFirstColum","minFirstColumn","_params$maxLastColumn","maxLastColumn","_params$availableSpac","availableSpace","_params$rowIndexOffse","rowIndexOffset","_params$position","position","_getRenderableIndexes9","_getRenderableIndexes10","renderedRows","forEach","push","unstable_calculateColSpan","rowId","columns","_getRenderableIndexes11","_getRenderableIndexes12","lastColumnToRender","renderedColumns","slice","_currentPage$range5","_rootProps$components","_renderedRows$_i","model","lastVisibleRowIndex","baseRowHeight","unstable_getRowHeight","isSelected","isRowSelectable","components","Row","selected","containerWidth","isLastVisible","componentsProps","needsHorizontalScrollbar","contentSize","useMemo","max","shouldExtendContent","size","minHeight","useEffect","rootStyle","overflowX","overflowY","getRenderContext","unstable_getRenderContext","getRootProps","_ref","_ref$style","other","onScroll","onWheel","onTouchMove","getContentProps","_ref3","_ref3$style","getRenderZoneProps"],"sources":["/Users/guilherme/Downloads/react-loan-calculator-main/node_modules/@mui/x-data-grid/hooks/features/virtualization/useGridVirtualScroller.js"],"sourcesContent":["import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"style\"];\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { useForkRef, unstable_useEnhancedEffect as useEnhancedEffect } from '@mui/material/utils';\nimport { useGridApiContext } from '../../utils/useGridApiContext';\nimport { useGridRootProps } from '../../utils/useGridRootProps';\nimport { useGridSelector } from '../../utils/useGridSelector';\nimport { gridVisibleColumnDefinitionsSelector, gridColumnsTotalWidthSelector, gridColumnPositionsSelector } from '../columns/gridColumnsSelector';\nimport { gridDensityRowHeightSelector } from '../density/densitySelector';\nimport { gridFocusCellSelector, gridTabIndexCellSelector } from '../focus/gridFocusStateSelector';\nimport { gridEditRowsStateSelector } from '../editRows/gridEditRowsSelector';\nimport { useGridVisibleRows } from '../../utils/useGridVisibleRows';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { clamp } from '../../../utils/utils';\nimport { selectedIdsLookupSelector } from '../selection/gridSelectionSelector';\nimport { gridRowsMetaSelector } from '../rows/gridRowsMetaSelector';\nimport { getFirstNonSpannedColumnToRender } from '../columns/gridColumnsUtils'; // Uses binary search to avoid looping through all possible positions\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport function binarySearch(offset, positions, sliceStart = 0, sliceEnd = positions.length) {\n  if (positions.length <= 0) {\n    return -1;\n  }\n\n  if (sliceStart >= sliceEnd) {\n    return sliceStart;\n  }\n\n  const pivot = sliceStart + Math.floor((sliceEnd - sliceStart) / 2);\n  const itemOffset = positions[pivot];\n  return offset <= itemOffset ? binarySearch(offset, positions, sliceStart, pivot) : binarySearch(offset, positions, pivot + 1, sliceEnd);\n}\n\nfunction exponentialSearch(offset, positions, index) {\n  let interval = 1;\n\n  while (index < positions.length && positions[index] < offset) {\n    index += interval;\n    interval *= 2;\n  }\n\n  return binarySearch(offset, positions, Math.floor(index / 2), Math.min(index, positions.length));\n}\n\nexport const getRenderableIndexes = ({\n  firstIndex,\n  lastIndex,\n  buffer,\n  minFirstIndex,\n  maxLastIndex\n}) => {\n  return [clamp(firstIndex - buffer, minFirstIndex, maxLastIndex), clamp(lastIndex + buffer, minFirstIndex, maxLastIndex)];\n};\n\nconst areRenderContextsEqual = (context1, context2) => {\n  if (context1 === context2) {\n    return true;\n  }\n\n  return context1.firstRowIndex === context2.firstRowIndex && context1.lastRowIndex === context2.lastRowIndex && context1.firstColumnIndex === context2.firstColumnIndex && context1.lastColumnIndex === context2.lastColumnIndex;\n};\n\nexport const useGridVirtualScroller = props => {\n  var _currentPage$range3, _currentPage$range4;\n\n  const apiRef = useGridApiContext();\n  const rootProps = useGridRootProps();\n  const visibleColumns = useGridSelector(apiRef, gridVisibleColumnDefinitionsSelector);\n  const {\n    ref,\n    disableVirtualization,\n    onRenderZonePositioning,\n    renderZoneMinColumnIndex = 0,\n    renderZoneMaxColumnIndex = visibleColumns.length,\n    getRowProps\n  } = props;\n  const columnPositions = useGridSelector(apiRef, gridColumnPositionsSelector);\n  const columnsTotalWidth = useGridSelector(apiRef, gridColumnsTotalWidthSelector);\n  const rowHeight = useGridSelector(apiRef, gridDensityRowHeightSelector);\n  const cellFocus = useGridSelector(apiRef, gridFocusCellSelector);\n  const cellTabIndex = useGridSelector(apiRef, gridTabIndexCellSelector);\n  const rowsMeta = useGridSelector(apiRef, gridRowsMetaSelector);\n  const editRowsState = useGridSelector(apiRef, gridEditRowsStateSelector);\n  const selectedRowsLookup = useGridSelector(apiRef, selectedIdsLookupSelector);\n  const currentPage = useGridVisibleRows(apiRef, rootProps);\n  const renderZoneRef = React.useRef(null);\n  const rootRef = React.useRef(null);\n  const handleRef = useForkRef(ref, rootRef);\n  const [renderContext, setRenderContext] = React.useState(null);\n  const prevRenderContext = React.useRef(renderContext);\n  const scrollPosition = React.useRef({\n    top: 0,\n    left: 0\n  });\n  const [containerDimensions, setContainerDimensions] = React.useState({\n    width: null,\n    height: null\n  });\n  const prevTotalWidth = React.useRef(columnsTotalWidth);\n  const getNearestIndexToRender = React.useCallback(offset => {\n    var _currentPage$range, _currentPage$range2;\n\n    const lastMeasuredIndexRelativeToAllRows = apiRef.current.unstable_getLastMeasuredRowIndex();\n    let allRowsMeasured = lastMeasuredIndexRelativeToAllRows === Infinity;\n\n    if ((_currentPage$range = currentPage.range) != null && _currentPage$range.lastRowIndex && !allRowsMeasured) {\n      // Check if all rows in this page are already measured\n      allRowsMeasured = lastMeasuredIndexRelativeToAllRows >= currentPage.range.lastRowIndex;\n    }\n\n    const lastMeasuredIndexRelativeToCurrentPage = clamp(lastMeasuredIndexRelativeToAllRows - (((_currentPage$range2 = currentPage.range) == null ? void 0 : _currentPage$range2.firstRowIndex) || 0), 0, rowsMeta.positions.length);\n\n    if (allRowsMeasured || rowsMeta.positions[lastMeasuredIndexRelativeToCurrentPage] >= offset) {\n      // If all rows were measured (when no row has \"auto\" as height) or all rows before the offset\n      // were measured, then use a binary search because it's faster.\n      return binarySearch(offset, rowsMeta.positions);\n    } // Otherwise, use an exponential search.\n    // If rows have \"auto\" as height, their positions will be based on estimated heights.\n    // In this case, we can skip several steps until we find a position higher than the offset.\n    // Inspired by https://github.com/bvaughn/react-virtualized/blob/master/source/Grid/utils/CellSizeAndPositionManager.js\n\n\n    return exponentialSearch(offset, rowsMeta.positions, lastMeasuredIndexRelativeToCurrentPage);\n  }, [apiRef, (_currentPage$range3 = currentPage.range) == null ? void 0 : _currentPage$range3.firstRowIndex, (_currentPage$range4 = currentPage.range) == null ? void 0 : _currentPage$range4.lastRowIndex, rowsMeta.positions]);\n  const computeRenderContext = React.useCallback(() => {\n    if (disableVirtualization) {\n      return {\n        firstRowIndex: 0,\n        lastRowIndex: currentPage.rows.length,\n        firstColumnIndex: 0,\n        lastColumnIndex: visibleColumns.length\n      };\n    }\n\n    const {\n      top,\n      left\n    } = scrollPosition.current; // Clamp the value because the search may return an index out of bounds.\n    // In the last index, this is not needed because Array.slice doesn't include it.\n\n    const firstRowIndex = Math.min(getNearestIndexToRender(top), rowsMeta.positions.length - 1);\n    const lastRowIndex = rootProps.autoHeight ? firstRowIndex + currentPage.rows.length : getNearestIndexToRender(top + containerDimensions.height);\n    let hasRowWithAutoHeight = false;\n    let firstColumnIndex = 0;\n    let lastColumnIndex = columnPositions.length;\n    const [firstRowToRender, lastRowToRender] = getRenderableIndexes({\n      firstIndex: firstRowIndex,\n      lastIndex: lastRowIndex,\n      minFirstIndex: 0,\n      maxLastIndex: currentPage.rows.length,\n      buffer: rootProps.rowBuffer\n    });\n\n    for (let i = firstRowToRender; i < lastRowToRender && !hasRowWithAutoHeight; i += 1) {\n      const row = currentPage.rows[i];\n      hasRowWithAutoHeight = apiRef.current.unstable_rowHasAutoHeight(row.id);\n    }\n\n    if (!hasRowWithAutoHeight) {\n      firstColumnIndex = binarySearch(left, columnPositions);\n      lastColumnIndex = binarySearch(left + containerDimensions.width, columnPositions);\n    }\n\n    return {\n      firstRowIndex,\n      lastRowIndex,\n      firstColumnIndex,\n      lastColumnIndex\n    };\n  }, [disableVirtualization, getNearestIndexToRender, rowsMeta.positions.length, rootProps.autoHeight, rootProps.rowBuffer, currentPage.rows, columnPositions, visibleColumns.length, apiRef, containerDimensions]);\n  useEnhancedEffect(() => {\n    if (disableVirtualization) {\n      renderZoneRef.current.style.transform = `translate3d(0px, 0px, 0px)`;\n    } else {\n      // TODO a scroll reset should not be necessary\n      rootRef.current.scrollLeft = 0;\n      rootRef.current.scrollTop = 0;\n    }\n  }, [disableVirtualization]);\n  useEnhancedEffect(() => {\n    setContainerDimensions({\n      width: rootRef.current.clientWidth,\n      height: rootRef.current.clientHeight\n    });\n  }, [rowsMeta.currentPageTotalHeight]);\n  const handleResize = React.useCallback(params => {\n    setContainerDimensions({\n      width: params.width,\n      height: params.height\n    });\n  }, []);\n  useGridApiEventHandler(apiRef, 'resize', handleResize);\n  const updateRenderZonePosition = React.useCallback(nextRenderContext => {\n    const [firstRowToRender, lastRowToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstRowIndex,\n      lastIndex: nextRenderContext.lastRowIndex,\n      minFirstIndex: 0,\n      maxLastIndex: currentPage.rows.length,\n      buffer: rootProps.rowBuffer\n    });\n    const [initialFirstColumnToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstColumnIndex,\n      lastIndex: nextRenderContext.lastColumnIndex,\n      minFirstIndex: renderZoneMinColumnIndex,\n      maxLastIndex: renderZoneMaxColumnIndex,\n      buffer: rootProps.columnBuffer\n    });\n    const firstColumnToRender = getFirstNonSpannedColumnToRender({\n      firstColumnToRender: initialFirstColumnToRender,\n      apiRef,\n      firstRowToRender,\n      lastRowToRender,\n      visibleRows: currentPage.rows\n    });\n    const top = gridRowsMetaSelector(apiRef.current.state).positions[firstRowToRender];\n    const left = gridColumnPositionsSelector(apiRef)[firstColumnToRender]; // Call directly the selector because it might be outdated when this method is called\n\n    renderZoneRef.current.style.transform = `translate3d(${left}px, ${top}px, 0px)`;\n\n    if (typeof onRenderZonePositioning === 'function') {\n      onRenderZonePositioning({\n        top,\n        left\n      });\n    }\n  }, [apiRef, currentPage.rows, onRenderZonePositioning, renderZoneMinColumnIndex, renderZoneMaxColumnIndex, rootProps.columnBuffer, rootProps.rowBuffer]);\n  const updateRenderContext = React.useCallback(nextRenderContext => {\n    if (prevRenderContext.current && areRenderContextsEqual(nextRenderContext, prevRenderContext.current)) {\n      updateRenderZonePosition(nextRenderContext);\n      return;\n    }\n\n    setRenderContext(nextRenderContext);\n    updateRenderZonePosition(nextRenderContext);\n    const [firstRowToRender, lastRowToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstRowIndex,\n      lastIndex: nextRenderContext.lastRowIndex,\n      minFirstIndex: 0,\n      maxLastIndex: currentPage.rows.length,\n      buffer: rootProps.rowBuffer\n    });\n    apiRef.current.publishEvent('renderedRowsIntervalChange', {\n      firstRowToRender,\n      lastRowToRender\n    });\n    prevRenderContext.current = nextRenderContext;\n  }, [apiRef, setRenderContext, prevRenderContext, currentPage.rows.length, rootProps.rowBuffer, updateRenderZonePosition]);\n  useEnhancedEffect(() => {\n    if (containerDimensions.width == null) {\n      return;\n    }\n\n    const initialRenderContext = computeRenderContext();\n    updateRenderContext(initialRenderContext);\n    const {\n      top,\n      left\n    } = scrollPosition.current;\n    const params = {\n      top,\n      left,\n      renderContext: initialRenderContext\n    };\n    apiRef.current.publishEvent('rowsScroll', params);\n  }, [apiRef, computeRenderContext, containerDimensions.width, updateRenderContext]);\n\n  const handleScroll = event => {\n    const {\n      scrollTop,\n      scrollLeft\n    } = event.currentTarget;\n    scrollPosition.current.top = scrollTop;\n    scrollPosition.current.left = scrollLeft; // On iOS and macOS, negative offsets are possible when swiping past the start\n\n    if (scrollLeft < 0 || scrollTop < 0 || !prevRenderContext.current) {\n      return;\n    } // When virtualization is disabled, the context never changes during scroll\n\n\n    const nextRenderContext = disableVirtualization ? prevRenderContext.current : computeRenderContext();\n    const topRowsScrolledSincePreviousRender = Math.abs(nextRenderContext.firstRowIndex - prevRenderContext.current.firstRowIndex);\n    const bottomRowsScrolledSincePreviousRender = Math.abs(nextRenderContext.lastRowIndex - prevRenderContext.current.lastRowIndex);\n    const topColumnsScrolledSincePreviousRender = Math.abs(nextRenderContext.firstColumnIndex - prevRenderContext.current.firstColumnIndex);\n    const bottomColumnsScrolledSincePreviousRender = Math.abs(nextRenderContext.lastColumnIndex - prevRenderContext.current.lastColumnIndex);\n    const shouldSetState = topRowsScrolledSincePreviousRender >= rootProps.rowThreshold || bottomRowsScrolledSincePreviousRender >= rootProps.rowThreshold || topColumnsScrolledSincePreviousRender >= rootProps.columnThreshold || bottomColumnsScrolledSincePreviousRender >= rootProps.columnThreshold || prevTotalWidth.current !== columnsTotalWidth; // TODO v6: rename event to a wider name, it's not only fired for row scrolling\n\n    apiRef.current.publishEvent('rowsScroll', {\n      top: scrollTop,\n      left: scrollLeft,\n      renderContext: shouldSetState ? nextRenderContext : prevRenderContext.current\n    }, event);\n\n    if (shouldSetState) {\n      // Prevents batching render context changes\n      ReactDOM.flushSync(() => {\n        updateRenderContext(nextRenderContext);\n      });\n      prevTotalWidth.current = columnsTotalWidth;\n    }\n  };\n\n  const handleWheel = event => {\n    apiRef.current.publishEvent('virtualScrollerWheel', {}, event);\n  };\n\n  const handleTouchMove = event => {\n    apiRef.current.publishEvent('virtualScrollerTouchMove', {}, event);\n  };\n\n  const getRows = (params = {\n    renderContext\n  }) => {\n    const {\n      renderContext: nextRenderContext,\n      minFirstColumn = renderZoneMinColumnIndex,\n      maxLastColumn = renderZoneMaxColumnIndex,\n      availableSpace = containerDimensions.width,\n      rowIndexOffset = 0,\n      position = 'center'\n    } = params;\n\n    if (!nextRenderContext || availableSpace == null) {\n      return null;\n    }\n\n    const rowBuffer = !disableVirtualization ? rootProps.rowBuffer : 0;\n    const columnBuffer = !disableVirtualization ? rootProps.columnBuffer : 0;\n    const [firstRowToRender, lastRowToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstRowIndex,\n      lastIndex: nextRenderContext.lastRowIndex,\n      minFirstIndex: 0,\n      maxLastIndex: currentPage.rows.length,\n      buffer: rowBuffer\n    });\n    const renderedRows = [];\n\n    if (params.rows) {\n      params.rows.forEach(row => {\n        renderedRows.push(row);\n        apiRef.current.unstable_calculateColSpan({\n          rowId: row.id,\n          minFirstColumn,\n          maxLastColumn,\n          columns: visibleColumns\n        });\n      });\n    } else {\n      if (!currentPage.range) {\n        return null;\n      }\n\n      for (let i = firstRowToRender; i < lastRowToRender; i += 1) {\n        const row = currentPage.rows[i];\n        renderedRows.push(row);\n        apiRef.current.unstable_calculateColSpan({\n          rowId: row.id,\n          minFirstColumn,\n          maxLastColumn,\n          columns: visibleColumns\n        });\n      }\n    }\n\n    const [initialFirstColumnToRender, lastColumnToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstColumnIndex,\n      lastIndex: nextRenderContext.lastColumnIndex,\n      minFirstIndex: minFirstColumn,\n      maxLastIndex: maxLastColumn,\n      buffer: columnBuffer\n    });\n    const firstColumnToRender = getFirstNonSpannedColumnToRender({\n      firstColumnToRender: initialFirstColumnToRender,\n      apiRef,\n      firstRowToRender,\n      lastRowToRender,\n      visibleRows: currentPage.rows\n    });\n    const renderedColumns = visibleColumns.slice(firstColumnToRender, lastColumnToRender);\n    const rows = [];\n\n    for (let i = 0; i < renderedRows.length; i += 1) {\n      var _currentPage$range5, _rootProps$components;\n\n      const {\n        id,\n        model\n      } = renderedRows[i];\n      const lastVisibleRowIndex = firstRowToRender + i === currentPage.rows.length - 1;\n      const baseRowHeight = !apiRef.current.unstable_rowHasAutoHeight(id) ? apiRef.current.unstable_getRowHeight(id) : 'auto';\n      let isSelected;\n\n      if (selectedRowsLookup[id] == null) {\n        isSelected = false;\n      } else {\n        isSelected = apiRef.current.isRowSelectable(id);\n      }\n\n      rows.push( /*#__PURE__*/_jsx(rootProps.components.Row, _extends({\n        row: model,\n        rowId: id,\n        rowHeight: baseRowHeight,\n        cellFocus: cellFocus // TODO move to inside the row\n        ,\n        cellTabIndex: cellTabIndex // TODO move to inside the row\n        ,\n        editRowsState: editRowsState // TODO move to inside the row\n        ,\n        renderedColumns: renderedColumns,\n        visibleColumns: visibleColumns,\n        firstColumnToRender: firstColumnToRender,\n        lastColumnToRender: lastColumnToRender,\n        selected: isSelected,\n        index: rowIndexOffset + ((currentPage == null ? void 0 : (_currentPage$range5 = currentPage.range) == null ? void 0 : _currentPage$range5.firstRowIndex) || 0) + firstRowToRender + i,\n        containerWidth: availableSpace,\n        isLastVisible: lastVisibleRowIndex,\n        position: position\n      }, typeof getRowProps === 'function' ? getRowProps(id, model) : {}, (_rootProps$components = rootProps.componentsProps) == null ? void 0 : _rootProps$components.row), id));\n    }\n\n    return rows;\n  };\n\n  const needsHorizontalScrollbar = containerDimensions.width && columnsTotalWidth > containerDimensions.width;\n  const contentSize = React.useMemo(() => {\n    // In cases where the columns exceed the available width,\n    // the horizontal scrollbar should be shown even when there're no rows.\n    // Keeping 1px as minimum height ensures that the scrollbar will visible if necessary.\n    const height = Math.max(rowsMeta.currentPageTotalHeight, 1);\n    let shouldExtendContent = false;\n\n    if (rootRef != null && rootRef.current && height <= (rootRef == null ? void 0 : rootRef.current.clientHeight)) {\n      shouldExtendContent = true;\n    }\n\n    const size = {\n      width: needsHorizontalScrollbar ? columnsTotalWidth : 'auto',\n      height,\n      minHeight: shouldExtendContent ? '100%' : 'auto'\n    };\n\n    if (rootProps.autoHeight && currentPage.rows.length === 0) {\n      size.height = 2 * rowHeight; // Give room to show the overlay when there's no row.\n    }\n\n    return size;\n  }, [rootRef, columnsTotalWidth, rowsMeta.currentPageTotalHeight, currentPage.rows.length, needsHorizontalScrollbar, rootProps.autoHeight, rowHeight]);\n  React.useEffect(() => {\n    apiRef.current.publishEvent('virtualScrollerContentSizeChange');\n  }, [apiRef, contentSize]);\n\n  if (rootProps.autoHeight && currentPage.rows.length === 0) {\n    contentSize.height = 2 * rowHeight; // Give room to show the overlay when there no rows.\n  }\n\n  const rootStyle = {};\n\n  if (!needsHorizontalScrollbar) {\n    rootStyle.overflowX = 'hidden';\n  }\n\n  if (rootProps.autoHeight) {\n    rootStyle.overflowY = 'hidden';\n  }\n\n  const getRenderContext = React.useCallback(() => {\n    return prevRenderContext.current;\n  }, []);\n  apiRef.current.unstable_getRenderContext = getRenderContext;\n  return {\n    renderContext,\n    updateRenderZonePosition,\n    getRows,\n    getRootProps: (_ref = {}) => {\n      let {\n        style = {}\n      } = _ref,\n          other = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n      return _extends({\n        ref: handleRef,\n        onScroll: handleScroll,\n        onWheel: handleWheel,\n        onTouchMove: handleTouchMove,\n        style: _extends({}, style, rootStyle)\n      }, other);\n    },\n    getContentProps: ({\n      style = {}\n    } = {}) => ({\n      style: _extends({}, style, contentSize)\n    }),\n    getRenderZoneProps: () => ({\n      ref: renderZoneRef\n    })\n  };\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}