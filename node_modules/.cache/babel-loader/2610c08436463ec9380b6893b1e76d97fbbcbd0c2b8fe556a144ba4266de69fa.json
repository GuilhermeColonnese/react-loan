{"ast":null,"code":"import _defineProperty from \"/Users/guilherme/Downloads/react-loan-calculator-main/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _slicedToArray from \"/Users/guilherme/Downloads/react-loan-calculator-main/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _toPropertyKey from \"@babel/runtime/helpers/esm/toPropertyKey\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nvar _excluded = [\"id\"],\n  _excluded2 = [\"id\"];\nimport * as React from 'react';\nimport { unstable_useEventCallback as useEventCallback } from '@mui/utils';\nimport { useGridApiEventHandler, useGridApiOptionHandler, GridSignature } from '../../utils/useGridApiEventHandler';\nimport { GridEditModes, GridRowModes } from '../../../models/gridEditRowModel';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { gridEditRowsStateSelector } from './gridEditRowsSelector';\nimport { isPrintableKey } from '../../../utils/keyboardUtils';\nimport { gridColumnFieldsSelector } from '../columns/gridColumnsSelector';\nimport { buildWarning } from '../../../utils/warning';\nimport { gridRowsIdToIdLookupSelector } from '../rows/gridRowsSelector';\nimport { deepClone } from '../../../utils/utils';\nimport { GridRowEditStopReasons, GridRowEditStartReasons } from '../../../models/params/gridRowParams';\nvar missingOnProcessRowUpdateErrorWarning = buildWarning(['MUI: A call to `processRowUpdate` threw an error which was not handled because `onProcessRowUpdateError` is missing.', 'To handle the error pass a callback to the `onProcessRowUpdateError` prop, e.g. `<DataGrid onProcessRowUpdateError={(error) => ...} />`.', 'For more detail, see http://mui.com/components/data-grid/editing/#persistence.'], 'error');\nexport var useGridRowEditing = function useGridRowEditing(apiRef, props) {\n  var _React$useState = React.useState({}),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    rowModesModel = _React$useState2[0],\n    setRowModesModel = _React$useState2[1];\n  var rowModesModelRef = React.useRef(rowModesModel);\n  var prevRowModesModel = React.useRef({});\n  var focusTimeout = React.useRef(null);\n  var nextFocusedCell = React.useRef(null);\n  var processRowUpdate = props.processRowUpdate,\n    onProcessRowUpdateError = props.onProcessRowUpdateError,\n    rowModesModelProp = props.rowModesModel,\n    onRowModesModelChange = props.onRowModesModelChange,\n    signature = props.signature;\n  var runIfEditModeIsRow = function runIfEditModeIsRow(callback) {\n    return function () {\n      if (props.editMode === GridEditModes.Row) {\n        callback.apply(void 0, arguments);\n      }\n    };\n  };\n  var throwIfNotEditable = React.useCallback(function (id, field) {\n    var params = apiRef.current.getCellParams(id, field);\n    if (!apiRef.current.isCellEditable(params)) {\n      throw new Error(\"MUI: The cell with id=\".concat(id, \" and field=\").concat(field, \" is not editable.\"));\n    }\n  }, [apiRef]);\n  var throwIfNotInMode = React.useCallback(function (id, mode) {\n    if (apiRef.current.getRowMode(id) !== mode) {\n      throw new Error(\"MUI: The row with id=\".concat(id, \" is not in \").concat(mode, \" mode.\"));\n    }\n  }, [apiRef]);\n  var handleCellDoubleClick = React.useCallback(function (params, event) {\n    if (!params.isEditable) {\n      return;\n    }\n    if (apiRef.current.getRowMode(params.id) === GridRowModes.Edit) {\n      return;\n    }\n    var rowParams = apiRef.current.getRowParams(params.id);\n    var newParams = _extends({}, rowParams, {\n      field: params.field,\n      reason: GridRowEditStartReasons.cellDoubleClick\n    });\n    apiRef.current.publishEvent('rowEditStart', newParams, event);\n  }, [apiRef]);\n  var handleCellFocusIn = React.useCallback(function (params) {\n    nextFocusedCell.current = params;\n  }, []);\n  var handleCellFocusOut = React.useCallback(function (params, event) {\n    if (!params.isEditable) {\n      return;\n    }\n    if (apiRef.current.getRowMode(params.id) === GridRowModes.View) {\n      return;\n    } // The mechanism to detect if we can stop editing a row is different from\n    // the cell editing. Instead of triggering it when clicking outside a cell,\n    // we must check if another cell in the same row was not clicked. To achieve\n    // that, first we keep track of all cells that gained focus. When a cell loses\n    // focus we check if the next cell that received focus is from a different row.\n\n    nextFocusedCell.current = null;\n    focusTimeout.current = setTimeout(function () {\n      var _nextFocusedCell$curr;\n      focusTimeout.current = null;\n      if (((_nextFocusedCell$curr = nextFocusedCell.current) == null ? void 0 : _nextFocusedCell$curr.id) !== params.id) {\n        // The row might have been deleted during the click\n        if (!apiRef.current.getRow(params.id)) {\n          return;\n        } // The row may already changed its mode\n\n        if (apiRef.current.getRowMode(params.id) === GridRowModes.View) {\n          return;\n        }\n        var rowParams = apiRef.current.getRowParams(params.id);\n        var newParams = _extends({}, rowParams, {\n          field: params.field,\n          reason: GridRowEditStopReasons.rowFocusOut\n        });\n        apiRef.current.publishEvent('rowEditStop', newParams, event);\n      }\n    });\n  }, [apiRef]);\n  React.useEffect(function () {\n    return function () {\n      clearTimeout(focusTimeout.current);\n    };\n  }, []);\n  var handleCellKeyDown = React.useCallback(function (params, event) {\n    if (params.cellMode === GridRowModes.Edit) {\n      // Wait until IME is settled for Asian languages like Japanese and Chinese\n      // TODO: `event.which` is depricated but this is a temporary workaround\n      if (event.which === 229) {\n        return;\n      }\n      var reason;\n      if (event.key === 'Escape') {\n        reason = GridRowEditStopReasons.escapeKeyDown;\n      } else if (event.key === 'Enter') {\n        reason = GridRowEditStopReasons.enterKeyDown;\n      } else if (event.key === 'Tab') {\n        var columnFields = gridColumnFieldsSelector(apiRef).filter(function (field) {\n          return apiRef.current.isCellEditable(apiRef.current.getCellParams(params.id, field));\n        });\n        if (event.shiftKey) {\n          if (params.field === columnFields[0]) {\n            // Exit if user pressed Shift+Tab on the first field\n            reason = GridRowEditStopReasons.shiftTabKeyDown;\n          }\n        } else if (params.field === columnFields[columnFields.length - 1]) {\n          // Exit if user pressed Tab on the last field\n          reason = GridRowEditStopReasons.tabKeyDown;\n        }\n        if (reason) {\n          event.preventDefault(); // Prevent going to the next element in the tab sequence\n        }\n      }\n\n      if (reason) {\n        var rowParams = apiRef.current.getRowParams(params.id);\n        var newParams = _extends({}, rowParams, {\n          reason: reason,\n          field: params.field\n        });\n        apiRef.current.publishEvent('rowEditStop', newParams, event);\n      }\n    } else if (params.isEditable) {\n      var _reason;\n      if (event.key === ' ' && event.shiftKey) {\n        return; // Shift + Space is used to select the row\n      }\n\n      if (isPrintableKey(event)) {\n        _reason = GridRowEditStartReasons.printableKeyDown;\n      } else if ((event.ctrlKey || event.metaKey) && event.key === 'v') {\n        _reason = GridRowEditStartReasons.printableKeyDown;\n      } else if (event.key === 'Enter') {\n        _reason = GridRowEditStartReasons.enterKeyDown;\n      } else if (event.key === 'Delete' || event.key === 'Backspace') {\n        // Delete on Windows, Backspace on macOS\n        _reason = GridRowEditStartReasons.deleteKeyDown;\n      }\n      if (_reason) {\n        var _rowParams = apiRef.current.getRowParams(params.id);\n        var _newParams = _extends({}, _rowParams, {\n          field: params.field,\n          key: event.key,\n          reason: _reason\n        });\n        apiRef.current.publishEvent('rowEditStart', _newParams, event);\n      }\n    }\n  }, [apiRef]);\n  var handleRowEditStart = React.useCallback(function (params) {\n    var id = params.id,\n      field = params.field,\n      reason = params.reason,\n      key = params.key;\n    var startRowEditModeParams = {\n      id: id,\n      fieldToFocus: field\n    };\n    if (reason === GridRowEditStartReasons.printableKeyDown) {\n      if (React.version.startsWith('18')) {\n        startRowEditModeParams.initialValue = key; // In React 17, cleaning the input is enough\n      } else {\n        startRowEditModeParams.deleteValue = !!field;\n      }\n    } else if (reason === GridRowEditStartReasons.deleteKeyDown) {\n      startRowEditModeParams.deleteValue = !!field;\n    }\n    apiRef.current.startRowEditMode(startRowEditModeParams);\n  }, [apiRef]);\n  var handleRowEditStop = React.useCallback(function (params) {\n    var id = params.id,\n      reason = params.reason,\n      field = params.field;\n    apiRef.current.unstable_runPendingEditCellValueMutation(id);\n    var cellToFocusAfter;\n    if (reason === GridRowEditStopReasons.enterKeyDown) {\n      cellToFocusAfter = 'below';\n    } else if (reason === GridRowEditStopReasons.tabKeyDown) {\n      cellToFocusAfter = 'right';\n    } else if (reason === GridRowEditStopReasons.shiftTabKeyDown) {\n      cellToFocusAfter = 'left';\n    }\n    var ignoreModifications = reason === 'escapeKeyDown';\n    var editingState = gridEditRowsStateSelector(apiRef.current.state);\n    if (!ignoreModifications && !props.disableIgnoreModificationsIfProcessingProps) {\n      // The user wants to stop editing the cell but we can't wait for the props to be processed.\n      // In this case, discard the modifications if any field is processing its props.\n      ignoreModifications = Object.values(editingState[id]).some(function (fieldProps) {\n        return fieldProps.isProcessingProps;\n      });\n    }\n    apiRef.current.stopRowEditMode({\n      id: id,\n      ignoreModifications: ignoreModifications,\n      field: field,\n      cellToFocusAfter: cellToFocusAfter\n    });\n  }, [apiRef, props.disableIgnoreModificationsIfProcessingProps]);\n  useGridApiEventHandler(apiRef, 'cellDoubleClick', runIfEditModeIsRow(handleCellDoubleClick));\n  useGridApiEventHandler(apiRef, 'cellFocusIn', runIfEditModeIsRow(handleCellFocusIn));\n  useGridApiEventHandler(apiRef, 'cellFocusOut', runIfEditModeIsRow(handleCellFocusOut));\n  useGridApiEventHandler(apiRef, 'cellKeyDown', runIfEditModeIsRow(handleCellKeyDown));\n  useGridApiEventHandler(apiRef, 'rowEditStart', runIfEditModeIsRow(handleRowEditStart));\n  useGridApiEventHandler(apiRef, 'rowEditStop', runIfEditModeIsRow(handleRowEditStop));\n  useGridApiOptionHandler(apiRef, 'rowEditStart', props.onRowEditStart);\n  useGridApiOptionHandler(apiRef, 'rowEditStop', props.onRowEditStop);\n  var getRowMode = React.useCallback(function (id) {\n    if (props.editMode === GridEditModes.Cell) {\n      return GridRowModes.View;\n    }\n    var editingState = gridEditRowsStateSelector(apiRef.current.state);\n    var isEditing = editingState[id] && Object.keys(editingState[id]).length > 0;\n    return isEditing ? GridRowModes.Edit : GridRowModes.View;\n  }, [apiRef, props.editMode]);\n  var updateRowModesModel = useEventCallback(function (newModel) {\n    var isNewModelDifferentFromProp = newModel !== props.rowModesModel;\n    if (onRowModesModelChange && isNewModelDifferentFromProp) {\n      var details = signature === GridSignature.DataGridPro ? {\n        api: apiRef.current\n      } : {};\n      onRowModesModelChange(newModel, details);\n    }\n    if (props.rowModesModel && isNewModelDifferentFromProp) {\n      return; // The prop always win\n    }\n\n    setRowModesModel(newModel);\n    rowModesModelRef.current = newModel;\n    apiRef.current.publishEvent('rowModesModelChange', newModel);\n  });\n  var updateRowInRowModesModel = React.useCallback(function (id, newProps) {\n    var newModel = _extends({}, rowModesModelRef.current);\n    if (newProps !== null) {\n      newModel[id] = _extends({}, newProps);\n    } else {\n      delete newModel[id];\n    }\n    updateRowModesModel(newModel);\n  }, [updateRowModesModel]);\n  var updateOrDeleteRowState = React.useCallback(function (id, newProps) {\n    apiRef.current.setState(function (state) {\n      var newEditingState = _extends({}, state.editRows);\n      if (newProps !== null) {\n        newEditingState[id] = newProps;\n      } else {\n        delete newEditingState[id];\n      }\n      return _extends({}, state, {\n        editRows: newEditingState\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef]);\n  var updateOrDeleteFieldState = React.useCallback(function (id, field, newProps) {\n    apiRef.current.setState(function (state) {\n      var newEditingState = _extends({}, state.editRows);\n      if (newProps !== null) {\n        newEditingState[id] = _extends({}, newEditingState[id], _defineProperty({}, field, _extends({}, newProps)));\n      } else {\n        delete newEditingState[id][field];\n        if (Object.keys(newEditingState[id]).length === 0) {\n          delete newEditingState[id];\n        }\n      }\n      return _extends({}, state, {\n        editRows: newEditingState\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef]);\n  var startRowEditMode = React.useCallback(function (params) {\n    var id = params.id,\n      other = _objectWithoutPropertiesLoose(params, _excluded);\n    throwIfNotInMode(id, GridRowModes.View);\n    updateRowInRowModesModel(id, _extends({\n      mode: GridRowModes.Edit\n    }, other));\n  }, [throwIfNotInMode, updateRowInRowModesModel]);\n  var updateStateToStartRowEditMode = useEventCallback(function (params) {\n    var id = params.id,\n      fieldToFocus = params.fieldToFocus,\n      deleteValue = params.deleteValue,\n      initialValue = params.initialValue;\n    var columnFields = gridColumnFieldsSelector(apiRef);\n    var newProps = columnFields.reduce(function (acc, field) {\n      var cellParams = apiRef.current.getCellParams(id, field);\n      if (!cellParams.isEditable) {\n        return acc;\n      }\n      var newValue = apiRef.current.getCellValue(id, field);\n      if (fieldToFocus === field && (deleteValue || initialValue)) {\n        newValue = deleteValue ? '' : initialValue;\n      }\n      acc[field] = {\n        value: newValue,\n        error: false,\n        isProcessingProps: false\n      };\n      return acc;\n    }, {});\n    updateOrDeleteRowState(id, newProps);\n    if (fieldToFocus) {\n      apiRef.current.setCellFocus(id, fieldToFocus);\n    }\n  });\n  var stopRowEditMode = React.useCallback(function (params) {\n    var id = params.id,\n      other = _objectWithoutPropertiesLoose(params, _excluded2);\n    throwIfNotInMode(id, GridRowModes.Edit);\n    updateRowInRowModesModel(id, _extends({\n      mode: GridRowModes.View\n    }, other));\n  }, [throwIfNotInMode, updateRowInRowModesModel]);\n  var updateStateToStopRowEditMode = useEventCallback(function (params) {\n    var id = params.id,\n      ignoreModifications = params.ignoreModifications,\n      focusedField = params.field,\n      _params$cellToFocusAf = params.cellToFocusAfter,\n      cellToFocusAfter = _params$cellToFocusAf === void 0 ? 'none' : _params$cellToFocusAf;\n    apiRef.current.unstable_runPendingEditCellValueMutation(id);\n    var finishRowEditMode = function finishRowEditMode() {\n      if (cellToFocusAfter !== 'none' && focusedField) {\n        apiRef.current.unstable_moveFocusToRelativeCell(id, focusedField, cellToFocusAfter);\n      }\n      updateOrDeleteRowState(id, null);\n      updateRowInRowModesModel(id, null);\n    };\n    if (ignoreModifications) {\n      finishRowEditMode();\n      return;\n    }\n    var editingState = gridEditRowsStateSelector(apiRef.current.state);\n    var row = apiRef.current.getRow(id);\n    var isSomeFieldProcessingProps = Object.values(editingState[id]).some(function (fieldProps) {\n      return fieldProps.isProcessingProps;\n    });\n    if (isSomeFieldProcessingProps) {\n      prevRowModesModel.current[id].mode = GridRowModes.Edit;\n      return;\n    }\n    var hasSomeFieldWithError = Object.values(editingState[id]).some(function (fieldProps) {\n      return fieldProps.error;\n    });\n    if (hasSomeFieldWithError) {\n      prevRowModesModel.current[id].mode = GridRowModes.Edit; // Revert the mode in the rowModesModel prop back to \"edit\"\n\n      updateRowInRowModesModel(id, {\n        mode: GridRowModes.Edit\n      });\n      return;\n    }\n    var rowUpdate = apiRef.current.unstable_getRowWithUpdatedValuesFromRowEditing(id);\n    if (processRowUpdate) {\n      var handleError = function handleError(errorThrown) {\n        prevRowModesModel.current[id].mode = GridRowModes.Edit; // Revert the mode in the rowModesModel prop back to \"edit\"\n\n        updateRowInRowModesModel(id, {\n          mode: GridRowModes.Edit\n        });\n        if (onProcessRowUpdateError) {\n          onProcessRowUpdateError(errorThrown);\n        } else {\n          missingOnProcessRowUpdateErrorWarning();\n        }\n      };\n      try {\n        Promise.resolve(processRowUpdate(rowUpdate, row)).then(function (finalRowUpdate) {\n          apiRef.current.updateRows([finalRowUpdate]);\n          finishRowEditMode();\n        }).catch(handleError);\n      } catch (errorThrown) {\n        handleError(errorThrown);\n      }\n    } else {\n      apiRef.current.updateRows([rowUpdate]);\n      finishRowEditMode();\n    }\n  });\n  var setRowEditingEditCellValue = React.useCallback(function (params) {\n    var id = params.id,\n      field = params.field,\n      value = params.value,\n      debounceMs = params.debounceMs,\n      skipValueParser = params.unstable_skipValueParser;\n    throwIfNotEditable(id, field);\n    var column = apiRef.current.getColumn(field);\n    var row = apiRef.current.getRow(id);\n    var parsedValue = value;\n    if (column.valueParser && !skipValueParser) {\n      parsedValue = column.valueParser(value, apiRef.current.getCellParams(id, field));\n    }\n    var editingState = gridEditRowsStateSelector(apiRef.current.state);\n    var newProps = _extends({}, editingState[id][field], {\n      value: parsedValue,\n      changeReason: debounceMs ? 'debouncedSetEditCellValue' : 'setEditCellValue'\n    });\n    if (!column.preProcessEditCellProps) {\n      updateOrDeleteFieldState(id, field, newProps);\n    }\n    return new Promise(function (resolve) {\n      var promises = [];\n      if (column.preProcessEditCellProps) {\n        var hasChanged = newProps.value !== editingState[id][field].value;\n        newProps = _extends({}, newProps, {\n          isProcessingProps: true\n        });\n        updateOrDeleteFieldState(id, field, newProps);\n        var _editingState$id = editingState[id],\n          otherFieldsProps = _objectWithoutPropertiesLoose(_editingState$id, [field].map(_toPropertyKey));\n        var promise = Promise.resolve(column.preProcessEditCellProps({\n          id: id,\n          row: row,\n          props: newProps,\n          hasChanged: hasChanged,\n          otherFieldsProps: otherFieldsProps\n        })).then(function (processedProps) {\n          // Check again if the row is in edit mode because the user may have\n          // discarded the changes while the props were being processed.\n          if (apiRef.current.getRowMode(id) === GridRowModes.View) {\n            resolve(false);\n            return;\n          }\n          editingState = gridEditRowsStateSelector(apiRef.current.state);\n          processedProps = _extends({}, processedProps, {\n            isProcessingProps: false\n          }); // We don't reuse the value from the props pre-processing because when the\n          // promise resolves it may be already outdated. The only exception to this rule\n          // is when there's no pre-processing.\n\n          processedProps.value = column.preProcessEditCellProps ? editingState[id][field].value : parsedValue;\n          updateOrDeleteFieldState(id, field, processedProps);\n        });\n        promises.push(promise);\n      }\n      Object.entries(editingState[id]).forEach(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n          thisField = _ref2[0],\n          fieldProps = _ref2[1];\n        if (thisField === field) {\n          return;\n        }\n        var fieldColumn = apiRef.current.getColumn(thisField);\n        if (!fieldColumn.preProcessEditCellProps) {\n          return;\n        }\n        fieldProps = _extends({}, fieldProps, {\n          isProcessingProps: true\n        });\n        updateOrDeleteFieldState(id, thisField, fieldProps);\n        editingState = gridEditRowsStateSelector(apiRef.current.state);\n        var _editingState$id2 = editingState[id],\n          otherFieldsProps = _objectWithoutPropertiesLoose(_editingState$id2, [thisField].map(_toPropertyKey));\n        var promise = Promise.resolve(fieldColumn.preProcessEditCellProps({\n          id: id,\n          row: row,\n          props: fieldProps,\n          hasChanged: false,\n          otherFieldsProps: otherFieldsProps\n        })).then(function (processedProps) {\n          // Check again if the row is in edit mode because the user may have\n          // discarded the changes while the props were being processed.\n          if (apiRef.current.getRowMode(id) === GridRowModes.View) {\n            resolve(false);\n            return;\n          }\n          processedProps = _extends({}, processedProps, {\n            isProcessingProps: false\n          });\n          updateOrDeleteFieldState(id, thisField, processedProps);\n        });\n        promises.push(promise);\n      });\n      Promise.all(promises).then(function () {\n        if (apiRef.current.getRowMode(id) === GridRowModes.Edit) {\n          editingState = gridEditRowsStateSelector(apiRef.current.state);\n          resolve(!editingState[id][field].error);\n        } else {\n          resolve(false);\n        }\n      });\n    });\n  }, [apiRef, throwIfNotEditable, updateOrDeleteFieldState]);\n  var getRowWithUpdatedValuesFromRowEditing = React.useCallback(function (id) {\n    var editingState = gridEditRowsStateSelector(apiRef.current.state);\n    var row = apiRef.current.getRow(id);\n    var rowUpdate = _extends({}, row);\n    Object.entries(editingState[id]).forEach(function (_ref3) {\n      var _ref4 = _slicedToArray(_ref3, 2),\n        field = _ref4[0],\n        fieldProps = _ref4[1];\n      var column = apiRef.current.getColumn(field);\n      if (column.valueSetter) {\n        rowUpdate = column.valueSetter({\n          value: fieldProps.value,\n          row: rowUpdate\n        });\n      } else {\n        rowUpdate[field] = fieldProps.value;\n      }\n    });\n    return rowUpdate;\n  }, [apiRef]);\n  var editingApi = {\n    getRowMode: getRowMode,\n    startRowEditMode: startRowEditMode,\n    stopRowEditMode: stopRowEditMode,\n    unstable_setRowEditingEditCellValue: setRowEditingEditCellValue,\n    unstable_getRowWithUpdatedValuesFromRowEditing: getRowWithUpdatedValuesFromRowEditing\n  };\n  useGridApiMethod(apiRef, editingApi, 'EditingApi');\n  React.useEffect(function () {\n    if (rowModesModelProp) {\n      updateRowModesModel(rowModesModelProp);\n    }\n  }, [rowModesModelProp, updateRowModesModel]);\n  React.useEffect(function () {\n    var idToIdLookup = gridRowsIdToIdLookupSelector(apiRef); // Update the ref here because updateStateToStopRowEditMode may change it later\n\n    var copyOfPrevRowModesModel = prevRowModesModel.current;\n    prevRowModesModel.current = deepClone(rowModesModel); // Do a deep-clone because the attributes might be changed later\n\n    Object.entries(rowModesModel).forEach(function (_ref5) {\n      var _ref6 = _slicedToArray(_ref5, 2),\n        id = _ref6[0],\n        params = _ref6[1];\n      var _copyOfPrevRowModesMo, _idToIdLookup$id;\n      var prevMode = ((_copyOfPrevRowModesMo = copyOfPrevRowModesModel[id]) == null ? void 0 : _copyOfPrevRowModesMo.mode) || GridRowModes.View;\n      var originalId = (_idToIdLookup$id = idToIdLookup[id]) != null ? _idToIdLookup$id : id;\n      if (params.mode === GridRowModes.Edit && prevMode === GridRowModes.View) {\n        updateStateToStartRowEditMode(_extends({\n          id: originalId\n        }, params));\n      } else if (params.mode === GridRowModes.View && prevMode === GridRowModes.Edit) {\n        updateStateToStopRowEditMode(_extends({\n          id: originalId\n        }, params));\n      }\n    });\n  }, [apiRef, rowModesModel, updateStateToStartRowEditMode, updateStateToStopRowEditMode]);\n};","map":{"version":3,"names":["_toPropertyKey","_objectWithoutPropertiesLoose","_extends","_excluded","_excluded2","React","unstable_useEventCallback","useEventCallback","useGridApiEventHandler","useGridApiOptionHandler","GridSignature","GridEditModes","GridRowModes","useGridApiMethod","gridEditRowsStateSelector","isPrintableKey","gridColumnFieldsSelector","buildWarning","gridRowsIdToIdLookupSelector","deepClone","GridRowEditStopReasons","GridRowEditStartReasons","missingOnProcessRowUpdateErrorWarning","useGridRowEditing","apiRef","props","_React$useState","useState","_React$useState2","_slicedToArray","rowModesModel","setRowModesModel","rowModesModelRef","useRef","prevRowModesModel","focusTimeout","nextFocusedCell","processRowUpdate","onProcessRowUpdateError","rowModesModelProp","onRowModesModelChange","signature","runIfEditModeIsRow","callback","editMode","Row","apply","arguments","throwIfNotEditable","useCallback","id","field","params","current","getCellParams","isCellEditable","Error","concat","throwIfNotInMode","mode","getRowMode","handleCellDoubleClick","event","isEditable","Edit","rowParams","getRowParams","newParams","reason","cellDoubleClick","publishEvent","handleCellFocusIn","handleCellFocusOut","View","setTimeout","_nextFocusedCell$curr","getRow","rowFocusOut","useEffect","clearTimeout","handleCellKeyDown","cellMode","which","key","escapeKeyDown","enterKeyDown","columnFields","filter","shiftKey","shiftTabKeyDown","length","tabKeyDown","preventDefault","printableKeyDown","ctrlKey","metaKey","deleteKeyDown","handleRowEditStart","startRowEditModeParams","fieldToFocus","version","startsWith","initialValue","deleteValue","startRowEditMode","handleRowEditStop","unstable_runPendingEditCellValueMutation","cellToFocusAfter","ignoreModifications","editingState","state","disableIgnoreModificationsIfProcessingProps","Object","values","some","fieldProps","isProcessingProps","stopRowEditMode","onRowEditStart","onRowEditStop","Cell","isEditing","keys","updateRowModesModel","newModel","isNewModelDifferentFromProp","details","DataGridPro","api","updateRowInRowModesModel","newProps","updateOrDeleteRowState","setState","newEditingState","editRows","forceUpdate","updateOrDeleteFieldState","_defineProperty","other","updateStateToStartRowEditMode","reduce","acc","cellParams","newValue","getCellValue","value","error","setCellFocus","updateStateToStopRowEditMode","focusedField","_params$cellToFocusAf","finishRowEditMode","unstable_moveFocusToRelativeCell","row","isSomeFieldProcessingProps","hasSomeFieldWithError","rowUpdate","unstable_getRowWithUpdatedValuesFromRowEditing","handleError","errorThrown","Promise","resolve","then","finalRowUpdate","updateRows","catch","setRowEditingEditCellValue","debounceMs","skipValueParser","unstable_skipValueParser","column","getColumn","parsedValue","valueParser","changeReason","preProcessEditCellProps","promises","hasChanged","_editingState$id","otherFieldsProps","map","promise","processedProps","push","entries","forEach","_ref","_ref2","thisField","fieldColumn","_editingState$id2","all","getRowWithUpdatedValuesFromRowEditing","_ref3","_ref4","valueSetter","editingApi","unstable_setRowEditingEditCellValue","idToIdLookup","copyOfPrevRowModesModel","_ref5","_ref6","_copyOfPrevRowModesMo","_idToIdLookup$id","prevMode","originalId"],"sources":["/Users/guilherme/Downloads/react-loan-calculator-main/node_modules/@mui/x-data-grid/hooks/features/editRows/useGridRowEditing.new.js"],"sourcesContent":["import _toPropertyKey from \"@babel/runtime/helpers/esm/toPropertyKey\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"id\"],\n      _excluded2 = [\"id\"];\nimport * as React from 'react';\nimport { unstable_useEventCallback as useEventCallback } from '@mui/utils';\nimport { useGridApiEventHandler, useGridApiOptionHandler, GridSignature } from '../../utils/useGridApiEventHandler';\nimport { GridEditModes, GridRowModes } from '../../../models/gridEditRowModel';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { gridEditRowsStateSelector } from './gridEditRowsSelector';\nimport { isPrintableKey } from '../../../utils/keyboardUtils';\nimport { gridColumnFieldsSelector } from '../columns/gridColumnsSelector';\nimport { buildWarning } from '../../../utils/warning';\nimport { gridRowsIdToIdLookupSelector } from '../rows/gridRowsSelector';\nimport { deepClone } from '../../../utils/utils';\nimport { GridRowEditStopReasons, GridRowEditStartReasons } from '../../../models/params/gridRowParams';\nconst missingOnProcessRowUpdateErrorWarning = buildWarning(['MUI: A call to `processRowUpdate` threw an error which was not handled because `onProcessRowUpdateError` is missing.', 'To handle the error pass a callback to the `onProcessRowUpdateError` prop, e.g. `<DataGrid onProcessRowUpdateError={(error) => ...} />`.', 'For more detail, see http://mui.com/components/data-grid/editing/#persistence.'], 'error');\nexport const useGridRowEditing = (apiRef, props) => {\n  const [rowModesModel, setRowModesModel] = React.useState({});\n  const rowModesModelRef = React.useRef(rowModesModel);\n  const prevRowModesModel = React.useRef({});\n  const focusTimeout = React.useRef(null);\n  const nextFocusedCell = React.useRef(null);\n  const {\n    processRowUpdate,\n    onProcessRowUpdateError,\n    rowModesModel: rowModesModelProp,\n    onRowModesModelChange,\n    signature\n  } = props;\n\n  const runIfEditModeIsRow = callback => (...args) => {\n    if (props.editMode === GridEditModes.Row) {\n      callback(...args);\n    }\n  };\n\n  const throwIfNotEditable = React.useCallback((id, field) => {\n    const params = apiRef.current.getCellParams(id, field);\n\n    if (!apiRef.current.isCellEditable(params)) {\n      throw new Error(`MUI: The cell with id=${id} and field=${field} is not editable.`);\n    }\n  }, [apiRef]);\n  const throwIfNotInMode = React.useCallback((id, mode) => {\n    if (apiRef.current.getRowMode(id) !== mode) {\n      throw new Error(`MUI: The row with id=${id} is not in ${mode} mode.`);\n    }\n  }, [apiRef]);\n  const handleCellDoubleClick = React.useCallback((params, event) => {\n    if (!params.isEditable) {\n      return;\n    }\n\n    if (apiRef.current.getRowMode(params.id) === GridRowModes.Edit) {\n      return;\n    }\n\n    const rowParams = apiRef.current.getRowParams(params.id);\n\n    const newParams = _extends({}, rowParams, {\n      field: params.field,\n      reason: GridRowEditStartReasons.cellDoubleClick\n    });\n\n    apiRef.current.publishEvent('rowEditStart', newParams, event);\n  }, [apiRef]);\n  const handleCellFocusIn = React.useCallback(params => {\n    nextFocusedCell.current = params;\n  }, []);\n  const handleCellFocusOut = React.useCallback((params, event) => {\n    if (!params.isEditable) {\n      return;\n    }\n\n    if (apiRef.current.getRowMode(params.id) === GridRowModes.View) {\n      return;\n    } // The mechanism to detect if we can stop editing a row is different from\n    // the cell editing. Instead of triggering it when clicking outside a cell,\n    // we must check if another cell in the same row was not clicked. To achieve\n    // that, first we keep track of all cells that gained focus. When a cell loses\n    // focus we check if the next cell that received focus is from a different row.\n\n\n    nextFocusedCell.current = null;\n    focusTimeout.current = setTimeout(() => {\n      var _nextFocusedCell$curr;\n\n      focusTimeout.current = null;\n\n      if (((_nextFocusedCell$curr = nextFocusedCell.current) == null ? void 0 : _nextFocusedCell$curr.id) !== params.id) {\n        // The row might have been deleted during the click\n        if (!apiRef.current.getRow(params.id)) {\n          return;\n        } // The row may already changed its mode\n\n\n        if (apiRef.current.getRowMode(params.id) === GridRowModes.View) {\n          return;\n        }\n\n        const rowParams = apiRef.current.getRowParams(params.id);\n\n        const newParams = _extends({}, rowParams, {\n          field: params.field,\n          reason: GridRowEditStopReasons.rowFocusOut\n        });\n\n        apiRef.current.publishEvent('rowEditStop', newParams, event);\n      }\n    });\n  }, [apiRef]);\n  React.useEffect(() => {\n    return () => {\n      clearTimeout(focusTimeout.current);\n    };\n  }, []);\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    if (params.cellMode === GridRowModes.Edit) {\n      // Wait until IME is settled for Asian languages like Japanese and Chinese\n      // TODO: `event.which` is depricated but this is a temporary workaround\n      if (event.which === 229) {\n        return;\n      }\n\n      let reason;\n\n      if (event.key === 'Escape') {\n        reason = GridRowEditStopReasons.escapeKeyDown;\n      } else if (event.key === 'Enter') {\n        reason = GridRowEditStopReasons.enterKeyDown;\n      } else if (event.key === 'Tab') {\n        const columnFields = gridColumnFieldsSelector(apiRef).filter(field => apiRef.current.isCellEditable(apiRef.current.getCellParams(params.id, field)));\n\n        if (event.shiftKey) {\n          if (params.field === columnFields[0]) {\n            // Exit if user pressed Shift+Tab on the first field\n            reason = GridRowEditStopReasons.shiftTabKeyDown;\n          }\n        } else if (params.field === columnFields[columnFields.length - 1]) {\n          // Exit if user pressed Tab on the last field\n          reason = GridRowEditStopReasons.tabKeyDown;\n        }\n\n        if (reason) {\n          event.preventDefault(); // Prevent going to the next element in the tab sequence\n        }\n      }\n\n      if (reason) {\n        const rowParams = apiRef.current.getRowParams(params.id);\n\n        const newParams = _extends({}, rowParams, {\n          reason,\n          field: params.field\n        });\n\n        apiRef.current.publishEvent('rowEditStop', newParams, event);\n      }\n    } else if (params.isEditable) {\n      let reason;\n\n      if (event.key === ' ' && event.shiftKey) {\n        return; // Shift + Space is used to select the row\n      }\n\n      if (isPrintableKey(event)) {\n        reason = GridRowEditStartReasons.printableKeyDown;\n      } else if ((event.ctrlKey || event.metaKey) && event.key === 'v') {\n        reason = GridRowEditStartReasons.printableKeyDown;\n      } else if (event.key === 'Enter') {\n        reason = GridRowEditStartReasons.enterKeyDown;\n      } else if (event.key === 'Delete' || event.key === 'Backspace') {\n        // Delete on Windows, Backspace on macOS\n        reason = GridRowEditStartReasons.deleteKeyDown;\n      }\n\n      if (reason) {\n        const rowParams = apiRef.current.getRowParams(params.id);\n\n        const newParams = _extends({}, rowParams, {\n          field: params.field,\n          key: event.key,\n          reason\n        });\n\n        apiRef.current.publishEvent('rowEditStart', newParams, event);\n      }\n    }\n  }, [apiRef]);\n  const handleRowEditStart = React.useCallback(params => {\n    const {\n      id,\n      field,\n      reason,\n      key\n    } = params;\n    const startRowEditModeParams = {\n      id,\n      fieldToFocus: field\n    };\n\n    if (reason === GridRowEditStartReasons.printableKeyDown) {\n      if (React.version.startsWith('18')) {\n        startRowEditModeParams.initialValue = key; // In React 17, cleaning the input is enough\n      } else {\n        startRowEditModeParams.deleteValue = !!field;\n      }\n    } else if (reason === GridRowEditStartReasons.deleteKeyDown) {\n      startRowEditModeParams.deleteValue = !!field;\n    }\n\n    apiRef.current.startRowEditMode(startRowEditModeParams);\n  }, [apiRef]);\n  const handleRowEditStop = React.useCallback(params => {\n    const {\n      id,\n      reason,\n      field\n    } = params;\n    apiRef.current.unstable_runPendingEditCellValueMutation(id);\n    let cellToFocusAfter;\n\n    if (reason === GridRowEditStopReasons.enterKeyDown) {\n      cellToFocusAfter = 'below';\n    } else if (reason === GridRowEditStopReasons.tabKeyDown) {\n      cellToFocusAfter = 'right';\n    } else if (reason === GridRowEditStopReasons.shiftTabKeyDown) {\n      cellToFocusAfter = 'left';\n    }\n\n    let ignoreModifications = reason === 'escapeKeyDown';\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n\n    if (!ignoreModifications && !props.disableIgnoreModificationsIfProcessingProps) {\n      // The user wants to stop editing the cell but we can't wait for the props to be processed.\n      // In this case, discard the modifications if any field is processing its props.\n      ignoreModifications = Object.values(editingState[id]).some(fieldProps => {\n        return fieldProps.isProcessingProps;\n      });\n    }\n\n    apiRef.current.stopRowEditMode({\n      id,\n      ignoreModifications,\n      field,\n      cellToFocusAfter\n    });\n  }, [apiRef, props.disableIgnoreModificationsIfProcessingProps]);\n  useGridApiEventHandler(apiRef, 'cellDoubleClick', runIfEditModeIsRow(handleCellDoubleClick));\n  useGridApiEventHandler(apiRef, 'cellFocusIn', runIfEditModeIsRow(handleCellFocusIn));\n  useGridApiEventHandler(apiRef, 'cellFocusOut', runIfEditModeIsRow(handleCellFocusOut));\n  useGridApiEventHandler(apiRef, 'cellKeyDown', runIfEditModeIsRow(handleCellKeyDown));\n  useGridApiEventHandler(apiRef, 'rowEditStart', runIfEditModeIsRow(handleRowEditStart));\n  useGridApiEventHandler(apiRef, 'rowEditStop', runIfEditModeIsRow(handleRowEditStop));\n  useGridApiOptionHandler(apiRef, 'rowEditStart', props.onRowEditStart);\n  useGridApiOptionHandler(apiRef, 'rowEditStop', props.onRowEditStop);\n  const getRowMode = React.useCallback(id => {\n    if (props.editMode === GridEditModes.Cell) {\n      return GridRowModes.View;\n    }\n\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    const isEditing = editingState[id] && Object.keys(editingState[id]).length > 0;\n    return isEditing ? GridRowModes.Edit : GridRowModes.View;\n  }, [apiRef, props.editMode]);\n  const updateRowModesModel = useEventCallback(newModel => {\n    const isNewModelDifferentFromProp = newModel !== props.rowModesModel;\n\n    if (onRowModesModelChange && isNewModelDifferentFromProp) {\n      const details = signature === GridSignature.DataGridPro ? {\n        api: apiRef.current\n      } : {};\n      onRowModesModelChange(newModel, details);\n    }\n\n    if (props.rowModesModel && isNewModelDifferentFromProp) {\n      return; // The prop always win\n    }\n\n    setRowModesModel(newModel);\n    rowModesModelRef.current = newModel;\n    apiRef.current.publishEvent('rowModesModelChange', newModel);\n  });\n  const updateRowInRowModesModel = React.useCallback((id, newProps) => {\n    const newModel = _extends({}, rowModesModelRef.current);\n\n    if (newProps !== null) {\n      newModel[id] = _extends({}, newProps);\n    } else {\n      delete newModel[id];\n    }\n\n    updateRowModesModel(newModel);\n  }, [updateRowModesModel]);\n  const updateOrDeleteRowState = React.useCallback((id, newProps) => {\n    apiRef.current.setState(state => {\n      const newEditingState = _extends({}, state.editRows);\n\n      if (newProps !== null) {\n        newEditingState[id] = newProps;\n      } else {\n        delete newEditingState[id];\n      }\n\n      return _extends({}, state, {\n        editRows: newEditingState\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef]);\n  const updateOrDeleteFieldState = React.useCallback((id, field, newProps) => {\n    apiRef.current.setState(state => {\n      const newEditingState = _extends({}, state.editRows);\n\n      if (newProps !== null) {\n        newEditingState[id] = _extends({}, newEditingState[id], {\n          [field]: _extends({}, newProps)\n        });\n      } else {\n        delete newEditingState[id][field];\n\n        if (Object.keys(newEditingState[id]).length === 0) {\n          delete newEditingState[id];\n        }\n      }\n\n      return _extends({}, state, {\n        editRows: newEditingState\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef]);\n  const startRowEditMode = React.useCallback(params => {\n    const {\n      id\n    } = params,\n          other = _objectWithoutPropertiesLoose(params, _excluded);\n\n    throwIfNotInMode(id, GridRowModes.View);\n    updateRowInRowModesModel(id, _extends({\n      mode: GridRowModes.Edit\n    }, other));\n  }, [throwIfNotInMode, updateRowInRowModesModel]);\n  const updateStateToStartRowEditMode = useEventCallback(params => {\n    const {\n      id,\n      fieldToFocus,\n      deleteValue,\n      initialValue\n    } = params;\n    const columnFields = gridColumnFieldsSelector(apiRef);\n    const newProps = columnFields.reduce((acc, field) => {\n      const cellParams = apiRef.current.getCellParams(id, field);\n\n      if (!cellParams.isEditable) {\n        return acc;\n      }\n\n      let newValue = apiRef.current.getCellValue(id, field);\n\n      if (fieldToFocus === field && (deleteValue || initialValue)) {\n        newValue = deleteValue ? '' : initialValue;\n      }\n\n      acc[field] = {\n        value: newValue,\n        error: false,\n        isProcessingProps: false\n      };\n      return acc;\n    }, {});\n    updateOrDeleteRowState(id, newProps);\n\n    if (fieldToFocus) {\n      apiRef.current.setCellFocus(id, fieldToFocus);\n    }\n  });\n  const stopRowEditMode = React.useCallback(params => {\n    const {\n      id\n    } = params,\n          other = _objectWithoutPropertiesLoose(params, _excluded2);\n\n    throwIfNotInMode(id, GridRowModes.Edit);\n    updateRowInRowModesModel(id, _extends({\n      mode: GridRowModes.View\n    }, other));\n  }, [throwIfNotInMode, updateRowInRowModesModel]);\n  const updateStateToStopRowEditMode = useEventCallback(params => {\n    const {\n      id,\n      ignoreModifications,\n      field: focusedField,\n      cellToFocusAfter = 'none'\n    } = params;\n    apiRef.current.unstable_runPendingEditCellValueMutation(id);\n\n    const finishRowEditMode = () => {\n      if (cellToFocusAfter !== 'none' && focusedField) {\n        apiRef.current.unstable_moveFocusToRelativeCell(id, focusedField, cellToFocusAfter);\n      }\n\n      updateOrDeleteRowState(id, null);\n      updateRowInRowModesModel(id, null);\n    };\n\n    if (ignoreModifications) {\n      finishRowEditMode();\n      return;\n    }\n\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    const row = apiRef.current.getRow(id);\n    const isSomeFieldProcessingProps = Object.values(editingState[id]).some(fieldProps => fieldProps.isProcessingProps);\n\n    if (isSomeFieldProcessingProps) {\n      prevRowModesModel.current[id].mode = GridRowModes.Edit;\n      return;\n    }\n\n    const hasSomeFieldWithError = Object.values(editingState[id]).some(fieldProps => fieldProps.error);\n\n    if (hasSomeFieldWithError) {\n      prevRowModesModel.current[id].mode = GridRowModes.Edit; // Revert the mode in the rowModesModel prop back to \"edit\"\n\n      updateRowInRowModesModel(id, {\n        mode: GridRowModes.Edit\n      });\n      return;\n    }\n\n    const rowUpdate = apiRef.current.unstable_getRowWithUpdatedValuesFromRowEditing(id);\n\n    if (processRowUpdate) {\n      const handleError = errorThrown => {\n        prevRowModesModel.current[id].mode = GridRowModes.Edit; // Revert the mode in the rowModesModel prop back to \"edit\"\n\n        updateRowInRowModesModel(id, {\n          mode: GridRowModes.Edit\n        });\n\n        if (onProcessRowUpdateError) {\n          onProcessRowUpdateError(errorThrown);\n        } else {\n          missingOnProcessRowUpdateErrorWarning();\n        }\n      };\n\n      try {\n        Promise.resolve(processRowUpdate(rowUpdate, row)).then(finalRowUpdate => {\n          apiRef.current.updateRows([finalRowUpdate]);\n          finishRowEditMode();\n        }).catch(handleError);\n      } catch (errorThrown) {\n        handleError(errorThrown);\n      }\n    } else {\n      apiRef.current.updateRows([rowUpdate]);\n      finishRowEditMode();\n    }\n  });\n  const setRowEditingEditCellValue = React.useCallback(params => {\n    const {\n      id,\n      field,\n      value,\n      debounceMs,\n      unstable_skipValueParser: skipValueParser\n    } = params;\n    throwIfNotEditable(id, field);\n    const column = apiRef.current.getColumn(field);\n    const row = apiRef.current.getRow(id);\n    let parsedValue = value;\n\n    if (column.valueParser && !skipValueParser) {\n      parsedValue = column.valueParser(value, apiRef.current.getCellParams(id, field));\n    }\n\n    let editingState = gridEditRowsStateSelector(apiRef.current.state);\n\n    let newProps = _extends({}, editingState[id][field], {\n      value: parsedValue,\n      changeReason: debounceMs ? 'debouncedSetEditCellValue' : 'setEditCellValue'\n    });\n\n    if (!column.preProcessEditCellProps) {\n      updateOrDeleteFieldState(id, field, newProps);\n    }\n\n    return new Promise(resolve => {\n      const promises = [];\n\n      if (column.preProcessEditCellProps) {\n        const hasChanged = newProps.value !== editingState[id][field].value;\n        newProps = _extends({}, newProps, {\n          isProcessingProps: true\n        });\n        updateOrDeleteFieldState(id, field, newProps);\n\n        const _editingState$id = editingState[id],\n              otherFieldsProps = _objectWithoutPropertiesLoose(_editingState$id, [field].map(_toPropertyKey));\n\n        const promise = Promise.resolve(column.preProcessEditCellProps({\n          id,\n          row,\n          props: newProps,\n          hasChanged,\n          otherFieldsProps\n        })).then(processedProps => {\n          // Check again if the row is in edit mode because the user may have\n          // discarded the changes while the props were being processed.\n          if (apiRef.current.getRowMode(id) === GridRowModes.View) {\n            resolve(false);\n            return;\n          }\n\n          editingState = gridEditRowsStateSelector(apiRef.current.state);\n          processedProps = _extends({}, processedProps, {\n            isProcessingProps: false\n          }); // We don't reuse the value from the props pre-processing because when the\n          // promise resolves it may be already outdated. The only exception to this rule\n          // is when there's no pre-processing.\n\n          processedProps.value = column.preProcessEditCellProps ? editingState[id][field].value : parsedValue;\n          updateOrDeleteFieldState(id, field, processedProps);\n        });\n        promises.push(promise);\n      }\n\n      Object.entries(editingState[id]).forEach(([thisField, fieldProps]) => {\n        if (thisField === field) {\n          return;\n        }\n\n        const fieldColumn = apiRef.current.getColumn(thisField);\n\n        if (!fieldColumn.preProcessEditCellProps) {\n          return;\n        }\n\n        fieldProps = _extends({}, fieldProps, {\n          isProcessingProps: true\n        });\n        updateOrDeleteFieldState(id, thisField, fieldProps);\n        editingState = gridEditRowsStateSelector(apiRef.current.state);\n\n        const _editingState$id2 = editingState[id],\n              otherFieldsProps = _objectWithoutPropertiesLoose(_editingState$id2, [thisField].map(_toPropertyKey));\n\n        const promise = Promise.resolve(fieldColumn.preProcessEditCellProps({\n          id,\n          row,\n          props: fieldProps,\n          hasChanged: false,\n          otherFieldsProps\n        })).then(processedProps => {\n          // Check again if the row is in edit mode because the user may have\n          // discarded the changes while the props were being processed.\n          if (apiRef.current.getRowMode(id) === GridRowModes.View) {\n            resolve(false);\n            return;\n          }\n\n          processedProps = _extends({}, processedProps, {\n            isProcessingProps: false\n          });\n          updateOrDeleteFieldState(id, thisField, processedProps);\n        });\n        promises.push(promise);\n      });\n      Promise.all(promises).then(() => {\n        if (apiRef.current.getRowMode(id) === GridRowModes.Edit) {\n          editingState = gridEditRowsStateSelector(apiRef.current.state);\n          resolve(!editingState[id][field].error);\n        } else {\n          resolve(false);\n        }\n      });\n    });\n  }, [apiRef, throwIfNotEditable, updateOrDeleteFieldState]);\n  const getRowWithUpdatedValuesFromRowEditing = React.useCallback(id => {\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    const row = apiRef.current.getRow(id);\n\n    let rowUpdate = _extends({}, row);\n\n    Object.entries(editingState[id]).forEach(([field, fieldProps]) => {\n      const column = apiRef.current.getColumn(field);\n\n      if (column.valueSetter) {\n        rowUpdate = column.valueSetter({\n          value: fieldProps.value,\n          row: rowUpdate\n        });\n      } else {\n        rowUpdate[field] = fieldProps.value;\n      }\n    });\n    return rowUpdate;\n  }, [apiRef]);\n  const editingApi = {\n    getRowMode,\n    startRowEditMode,\n    stopRowEditMode,\n    unstable_setRowEditingEditCellValue: setRowEditingEditCellValue,\n    unstable_getRowWithUpdatedValuesFromRowEditing: getRowWithUpdatedValuesFromRowEditing\n  };\n  useGridApiMethod(apiRef, editingApi, 'EditingApi');\n  React.useEffect(() => {\n    if (rowModesModelProp) {\n      updateRowModesModel(rowModesModelProp);\n    }\n  }, [rowModesModelProp, updateRowModesModel]);\n  React.useEffect(() => {\n    const idToIdLookup = gridRowsIdToIdLookupSelector(apiRef); // Update the ref here because updateStateToStopRowEditMode may change it later\n\n    const copyOfPrevRowModesModel = prevRowModesModel.current;\n    prevRowModesModel.current = deepClone(rowModesModel); // Do a deep-clone because the attributes might be changed later\n\n    Object.entries(rowModesModel).forEach(([id, params]) => {\n      var _copyOfPrevRowModesMo, _idToIdLookup$id;\n\n      const prevMode = ((_copyOfPrevRowModesMo = copyOfPrevRowModesModel[id]) == null ? void 0 : _copyOfPrevRowModesMo.mode) || GridRowModes.View;\n      const originalId = (_idToIdLookup$id = idToIdLookup[id]) != null ? _idToIdLookup$id : id;\n\n      if (params.mode === GridRowModes.Edit && prevMode === GridRowModes.View) {\n        updateStateToStartRowEditMode(_extends({\n          id: originalId\n        }, params));\n      } else if (params.mode === GridRowModes.View && prevMode === GridRowModes.Edit) {\n        updateStateToStopRowEditMode(_extends({\n          id: originalId\n        }, params));\n      }\n    });\n  }, [apiRef, rowModesModel, updateStateToStartRowEditMode, updateStateToStopRowEditMode]);\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}