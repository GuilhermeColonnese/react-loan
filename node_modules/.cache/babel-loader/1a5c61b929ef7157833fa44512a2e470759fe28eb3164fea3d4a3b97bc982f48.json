{"ast":null,"code":"import _defineProperty from \"/Users/guilherme/Downloads/react-loan-calculator-main/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _toConsumableArray from \"/Users/guilherme/Downloads/react-loan-calculator-main/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"groupId\", \"children\"];\nimport * as React from 'react';\nimport { isLeaf } from '../../../models/gridColumnGrouping';\nimport { gridColumnGroupsLookupSelector } from './gridColumnGroupsSelector';\nimport { gridColumnLookupSelector } from '../columns/gridColumnsSelector';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nexport function hasGroupPath(lookupElement) {\n  return lookupElement.groupPath !== undefined;\n}\n\n// This is the recurrence function that help writing `unwrapGroupingColumnModel()`\nvar recurrentUnwrapGroupingColumnModel = function recurrentUnwrapGroupingColumnModel(columnGroupNode, parents, unwrappedGroupingModelToComplet) {\n  if (isLeaf(columnGroupNode)) {\n    if (unwrappedGroupingModelToComplet[columnGroupNode.field] !== undefined) {\n      throw new Error([\"MUI: columnGroupingModel contains duplicated field\", \"column field \".concat(columnGroupNode.field, \" occurrs two times in the grouping model:\"), \"- \".concat(unwrappedGroupingModelToComplet[columnGroupNode.field].join(' > ')), \"- \".concat(parents.join(' > '))].join('\\n'));\n    }\n    unwrappedGroupingModelToComplet[columnGroupNode.field] = parents;\n    return;\n  }\n  var groupId = columnGroupNode.groupId,\n    children = columnGroupNode.children;\n  children.forEach(function (child) {\n    recurrentUnwrapGroupingColumnModel(child, [].concat(_toConsumableArray(parents), [groupId]), unwrappedGroupingModelToComplet);\n  });\n};\n/**\n * This is a function that provide for each column the array of its parents.\n * Parents are ordered from the root to the leaf.\n * @param columnGroupingModel The model such as provided in DataGrid props\n * @returns An object `{[field]: groupIds}` where `groupIds` is the parents of the column `field`\n */\n\nexport var unwrapGroupingColumnModel = function unwrapGroupingColumnModel(columnGroupingModel) {\n  if (!columnGroupingModel) {\n    return {};\n  }\n  var unwrappedSubTree = {};\n  columnGroupingModel.forEach(function (columnGroupNode) {\n    recurrentUnwrapGroupingColumnModel(columnGroupNode, [], unwrappedSubTree);\n  });\n  return unwrappedSubTree;\n};\nvar createGroupLookup = function createGroupLookup(columnGroupingModel) {\n  var groupLookup = {};\n  columnGroupingModel.forEach(function (node) {\n    if (isLeaf(node)) {\n      return;\n    }\n    var groupId = node.groupId,\n      children = node.children,\n      other = _objectWithoutPropertiesLoose(node, _excluded);\n    if (!groupId) {\n      throw new Error('MUI: An element of the columnGroupingModel does not have either `field` or `groupId`.');\n    }\n    if (!children) {\n      console.warn(\"MUI: group groupId=\".concat(groupId, \" has no children.\"));\n    }\n    var groupParam = _extends({}, other, {\n      groupId: groupId\n    });\n    var subTreeLookup = createGroupLookup(children);\n    if (subTreeLookup[groupId] !== undefined || groupLookup[groupId] !== undefined) {\n      throw new Error(\"MUI: The groupId \".concat(groupId, \" is used multiple times in the columnGroupingModel.\"));\n    }\n    groupLookup = _extends({}, groupLookup, subTreeLookup, _defineProperty({}, groupId, groupParam));\n  });\n  return _extends({}, groupLookup);\n};\nexport var columnGroupsStateInitializer = function columnGroupsStateInitializer(state, props) {\n  var _props$columnGrouping;\n  var groupLookup = createGroupLookup((_props$columnGrouping = props.columnGroupingModel) != null ? _props$columnGrouping : []);\n  return _extends({}, state, {\n    columnGrouping: {\n      lookup: groupLookup,\n      groupCollapsedModel: {}\n    }\n  });\n};\n/**\n * @requires useGridColumns (method, event)\n * @requires useGridParamsApi (method)\n */\n\nexport var useGridColumnGrouping = function useGridColumnGrouping(apiRef, props) {\n  var _props$experimentalFe2;\n\n  /**\n   * API METHODS\n   */\n  var getColumnGroupPath = React.useCallback(function (field) {\n    var _columnLookup$field$g, _columnLookup$field;\n    var columnLookup = gridColumnLookupSelector(apiRef);\n    return (_columnLookup$field$g = (_columnLookup$field = columnLookup[field]) == null ? void 0 : _columnLookup$field.groupPath) != null ? _columnLookup$field$g : [];\n  }, [apiRef]);\n  var getAllGroupDetails = React.useCallback(function () {\n    var columnGroupLookup = gridColumnGroupsLookupSelector(apiRef);\n    return columnGroupLookup;\n  }, [apiRef]);\n  var columnGroupingApi = {\n    unstable_getColumnGroupPath: getColumnGroupPath,\n    unstable_getAllGroupDetails: getAllGroupDetails\n  };\n  useGridApiMethod(apiRef, columnGroupingApi, 'GridColumnGroupingApi');\n  /**\n   * EFFECTS\n   */\n  // The effect does not track any value defined synchronously during the 1st render by hooks called after `useGridColumns`\n  // As a consequence, the state generated by the 1st run of this useEffect will always be equal to the initialization one\n\n  var isFirstRender = React.useRef(true);\n  React.useEffect(function () {\n    var _props$experimentalFe, _props$columnGrouping2;\n    if (isFirstRender.current) {\n      isFirstRender.current = false;\n      return;\n    }\n    if (!((_props$experimentalFe = props.experimentalFeatures) != null && _props$experimentalFe.columnGrouping)) {\n      return;\n    }\n    var groupLookup = createGroupLookup((_props$columnGrouping2 = props.columnGroupingModel) != null ? _props$columnGrouping2 : []);\n    apiRef.current.setState(function (state) {\n      return _extends({}, state, {\n        columnGrouping: _extends({}, state.columnGrouping, {\n          lookup: groupLookup\n        })\n      });\n    });\n  }, [apiRef, props.columnGroupingModel, (_props$experimentalFe2 = props.experimentalFeatures) == null ? void 0 : _props$experimentalFe2.columnGrouping]);\n};","map":{"version":3,"names":["_extends","_objectWithoutPropertiesLoose","_excluded","React","isLeaf","gridColumnGroupsLookupSelector","gridColumnLookupSelector","useGridApiMethod","hasGroupPath","lookupElement","groupPath","undefined","recurrentUnwrapGroupingColumnModel","columnGroupNode","parents","unwrappedGroupingModelToComplet","field","Error","concat","join","groupId","children","forEach","child","_toConsumableArray","unwrapGroupingColumnModel","columnGroupingModel","unwrappedSubTree","createGroupLookup","groupLookup","node","other","console","warn","groupParam","subTreeLookup","_defineProperty","columnGroupsStateInitializer","state","props","_props$columnGrouping","columnGrouping","lookup","groupCollapsedModel","useGridColumnGrouping","apiRef","_props$experimentalFe2","getColumnGroupPath","useCallback","_columnLookup$field$g","_columnLookup$field","columnLookup","getAllGroupDetails","columnGroupLookup","columnGroupingApi","unstable_getColumnGroupPath","unstable_getAllGroupDetails","isFirstRender","useRef","useEffect","_props$experimentalFe","_props$columnGrouping2","current","experimentalFeatures","setState"],"sources":["/Users/guilherme/Downloads/react-loan-calculator-main/node_modules/@mui/x-data-grid/hooks/features/columnGrouping/useGridColumnGrouping.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"groupId\", \"children\"];\nimport * as React from 'react';\nimport { isLeaf } from '../../../models/gridColumnGrouping';\nimport { gridColumnGroupsLookupSelector } from './gridColumnGroupsSelector';\nimport { gridColumnLookupSelector } from '../columns/gridColumnsSelector';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nexport function hasGroupPath(lookupElement) {\n  return lookupElement.groupPath !== undefined;\n}\n\n// This is the recurrence function that help writing `unwrapGroupingColumnModel()`\nconst recurrentUnwrapGroupingColumnModel = (columnGroupNode, parents, unwrappedGroupingModelToComplet) => {\n  if (isLeaf(columnGroupNode)) {\n    if (unwrappedGroupingModelToComplet[columnGroupNode.field] !== undefined) {\n      throw new Error([`MUI: columnGroupingModel contains duplicated field`, `column field ${columnGroupNode.field} occurrs two times in the grouping model:`, `- ${unwrappedGroupingModelToComplet[columnGroupNode.field].join(' > ')}`, `- ${parents.join(' > ')}`].join('\\n'));\n    }\n\n    unwrappedGroupingModelToComplet[columnGroupNode.field] = parents;\n    return;\n  }\n\n  const {\n    groupId,\n    children\n  } = columnGroupNode;\n  children.forEach(child => {\n    recurrentUnwrapGroupingColumnModel(child, [...parents, groupId], unwrappedGroupingModelToComplet);\n  });\n};\n/**\n * This is a function that provide for each column the array of its parents.\n * Parents are ordered from the root to the leaf.\n * @param columnGroupingModel The model such as provided in DataGrid props\n * @returns An object `{[field]: groupIds}` where `groupIds` is the parents of the column `field`\n */\n\n\nexport const unwrapGroupingColumnModel = columnGroupingModel => {\n  if (!columnGroupingModel) {\n    return {};\n  }\n\n  const unwrappedSubTree = {};\n  columnGroupingModel.forEach(columnGroupNode => {\n    recurrentUnwrapGroupingColumnModel(columnGroupNode, [], unwrappedSubTree);\n  });\n  return unwrappedSubTree;\n};\n\nconst createGroupLookup = columnGroupingModel => {\n  let groupLookup = {};\n  columnGroupingModel.forEach(node => {\n    if (isLeaf(node)) {\n      return;\n    }\n\n    const {\n      groupId,\n      children\n    } = node,\n          other = _objectWithoutPropertiesLoose(node, _excluded);\n\n    if (!groupId) {\n      throw new Error('MUI: An element of the columnGroupingModel does not have either `field` or `groupId`.');\n    }\n\n    if (!children) {\n      console.warn(`MUI: group groupId=${groupId} has no children.`);\n    }\n\n    const groupParam = _extends({}, other, {\n      groupId\n    });\n\n    const subTreeLookup = createGroupLookup(children);\n\n    if (subTreeLookup[groupId] !== undefined || groupLookup[groupId] !== undefined) {\n      throw new Error(`MUI: The groupId ${groupId} is used multiple times in the columnGroupingModel.`);\n    }\n\n    groupLookup = _extends({}, groupLookup, subTreeLookup, {\n      [groupId]: groupParam\n    });\n  });\n  return _extends({}, groupLookup);\n};\n\nexport const columnGroupsStateInitializer = (state, props) => {\n  var _props$columnGrouping;\n\n  const groupLookup = createGroupLookup((_props$columnGrouping = props.columnGroupingModel) != null ? _props$columnGrouping : []);\n  return _extends({}, state, {\n    columnGrouping: {\n      lookup: groupLookup,\n      groupCollapsedModel: {}\n    }\n  });\n};\n/**\n * @requires useGridColumns (method, event)\n * @requires useGridParamsApi (method)\n */\n\nexport const useGridColumnGrouping = (apiRef, props) => {\n  var _props$experimentalFe2;\n\n  /**\n   * API METHODS\n   */\n  const getColumnGroupPath = React.useCallback(field => {\n    var _columnLookup$field$g, _columnLookup$field;\n\n    const columnLookup = gridColumnLookupSelector(apiRef);\n    return (_columnLookup$field$g = (_columnLookup$field = columnLookup[field]) == null ? void 0 : _columnLookup$field.groupPath) != null ? _columnLookup$field$g : [];\n  }, [apiRef]);\n  const getAllGroupDetails = React.useCallback(() => {\n    const columnGroupLookup = gridColumnGroupsLookupSelector(apiRef);\n    return columnGroupLookup;\n  }, [apiRef]);\n  const columnGroupingApi = {\n    unstable_getColumnGroupPath: getColumnGroupPath,\n    unstable_getAllGroupDetails: getAllGroupDetails\n  };\n  useGridApiMethod(apiRef, columnGroupingApi, 'GridColumnGroupingApi');\n  /**\n   * EFFECTS\n   */\n  // The effect does not track any value defined synchronously during the 1st render by hooks called after `useGridColumns`\n  // As a consequence, the state generated by the 1st run of this useEffect will always be equal to the initialization one\n\n  const isFirstRender = React.useRef(true);\n  React.useEffect(() => {\n    var _props$experimentalFe, _props$columnGrouping2;\n\n    if (isFirstRender.current) {\n      isFirstRender.current = false;\n      return;\n    }\n\n    if (!((_props$experimentalFe = props.experimentalFeatures) != null && _props$experimentalFe.columnGrouping)) {\n      return;\n    }\n\n    const groupLookup = createGroupLookup((_props$columnGrouping2 = props.columnGroupingModel) != null ? _props$columnGrouping2 : []);\n    apiRef.current.setState(state => _extends({}, state, {\n      columnGrouping: _extends({}, state.columnGrouping, {\n        lookup: groupLookup\n      })\n    }));\n  }, [apiRef, props.columnGroupingModel, (_props$experimentalFe2 = props.experimentalFeatures) == null ? void 0 : _props$experimentalFe2.columnGrouping]);\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}