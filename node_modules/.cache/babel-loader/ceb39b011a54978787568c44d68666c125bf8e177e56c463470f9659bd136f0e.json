{"ast":null,"code":"import _toConsumableArray from \"/Users/guilherme/Downloads/react-loan-calculator-main/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { GridFeatureModeConstant } from '../../../models/gridFeatureMode';\nimport { isEnterKey } from '../../../utils/keyboardUtils';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { gridColumnLookupSelector } from '../columns/gridColumnsSelector';\nimport { gridSortedRowEntriesSelector, gridSortedRowIdsSelector, gridSortModelSelector } from './gridSortingSelector';\nimport { gridRowIdsSelector, gridRowTreeSelector } from '../rows';\nimport { useFirstRender } from '../../utils/useFirstRender';\nimport { useGridRegisterStrategyProcessor, GRID_DEFAULT_STRATEGY } from '../../core/strategyProcessing';\nimport { buildAggregatedSortingApplier, mergeStateWithSortModel, getNextGridSortDirection, sanitizeSortModel } from './gridSortingUtils';\nimport { useGridRegisterPipeProcessor } from '../../core/pipeProcessing';\nexport var sortingStateInitializer = function sortingStateInitializer(state, props) {\n  var _ref, _props$sortModel, _props$initialState, _props$initialState$s;\n  var sortModel = (_ref = (_props$sortModel = props.sortModel) != null ? _props$sortModel : (_props$initialState = props.initialState) == null ? void 0 : (_props$initialState$s = _props$initialState.sorting) == null ? void 0 : _props$initialState$s.sortModel) != null ? _ref : [];\n  return _extends({}, state, {\n    sorting: {\n      sortModel: sanitizeSortModel(sortModel, props.disableMultipleColumnsSorting),\n      sortedRows: []\n    }\n  });\n};\n/**\n * @requires useGridRows (event)\n * @requires useGridColumns (event)\n */\n\nexport var useGridSorting = function useGridSorting(apiRef, props) {\n  var _props$initialState3, _props$initialState3$;\n  var logger = useGridLogger(apiRef, 'useGridSorting');\n  apiRef.current.unstable_registerControlState({\n    stateId: 'sortModel',\n    propModel: props.sortModel,\n    propOnChange: props.onSortModelChange,\n    stateSelector: gridSortModelSelector,\n    changeEvent: 'sortModelChange'\n  });\n  var upsertSortModel = React.useCallback(function (field, sortItem) {\n    var sortModel = gridSortModelSelector(apiRef);\n    var existingIdx = sortModel.findIndex(function (c) {\n      return c.field === field;\n    });\n    var newSortModel = _toConsumableArray(sortModel);\n    if (existingIdx > -1) {\n      if (!sortItem) {\n        newSortModel.splice(existingIdx, 1);\n      } else {\n        newSortModel.splice(existingIdx, 1, sortItem);\n      }\n    } else {\n      newSortModel = [].concat(_toConsumableArray(sortModel), [sortItem]);\n    }\n    return newSortModel;\n  }, [apiRef]);\n  var createSortItem = React.useCallback(function (col, directionOverride) {\n    var _col$sortingOrder2;\n    var sortModel = gridSortModelSelector(apiRef);\n    var existing = sortModel.find(function (c) {\n      return c.field === col.field;\n    });\n    if (existing) {\n      var _col$sortingOrder;\n      var nextSort = directionOverride === undefined ? getNextGridSortDirection((_col$sortingOrder = col.sortingOrder) != null ? _col$sortingOrder : props.sortingOrder, existing.sort) : directionOverride;\n      return nextSort == null ? undefined : _extends({}, existing, {\n        sort: nextSort\n      });\n    }\n    return {\n      field: col.field,\n      sort: directionOverride === undefined ? getNextGridSortDirection((_col$sortingOrder2 = col.sortingOrder) != null ? _col$sortingOrder2 : props.sortingOrder) : directionOverride\n    };\n  }, [apiRef, props.sortingOrder]);\n  /**\n   * API METHODS\n   */\n\n  var applySorting = React.useCallback(function () {\n    apiRef.current.setState(function (state) {\n      if (props.sortingMode === GridFeatureModeConstant.server) {\n        logger.debug('Skipping sorting rows as sortingMode = server');\n        return _extends({}, state, {\n          sorting: _extends({}, state.sorting, {\n            sortedRows: gridRowIdsSelector(state, apiRef.current.instanceId)\n          })\n        });\n      }\n      var sortModel = gridSortModelSelector(state, apiRef.current.instanceId);\n      var sortRowList = buildAggregatedSortingApplier(sortModel, apiRef);\n      var sortedRows = apiRef.current.unstable_applyStrategyProcessor('sorting', {\n        sortRowList: sortRowList\n      });\n      return _extends({}, state, {\n        sorting: _extends({}, state.sorting, {\n          sortedRows: sortedRows\n        })\n      });\n    });\n    apiRef.current.publishEvent('sortedRowsSet');\n    apiRef.current.forceUpdate();\n  }, [apiRef, logger, props.sortingMode]);\n  var setSortModel = React.useCallback(function (model) {\n    var currentModel = gridSortModelSelector(apiRef);\n    if (currentModel !== model) {\n      logger.debug(\"Setting sort model\");\n      apiRef.current.setState(mergeStateWithSortModel(model, props.disableMultipleColumnsSorting));\n      apiRef.current.forceUpdate();\n      apiRef.current.applySorting();\n    }\n  }, [apiRef, logger, props.disableMultipleColumnsSorting]);\n  var sortColumn = React.useCallback(function (column, direction, allowMultipleSorting) {\n    if (!column.sortable) {\n      return;\n    }\n    var sortItem = createSortItem(column, direction);\n    var sortModel;\n    if (!allowMultipleSorting || props.disableMultipleColumnsSorting) {\n      sortModel = !sortItem ? [] : [sortItem];\n    } else {\n      sortModel = upsertSortModel(column.field, sortItem);\n    }\n    apiRef.current.setSortModel(sortModel);\n  }, [apiRef, upsertSortModel, createSortItem, props.disableMultipleColumnsSorting]);\n  var getSortModel = React.useCallback(function () {\n    return gridSortModelSelector(apiRef);\n  }, [apiRef]);\n  var getSortedRows = React.useCallback(function () {\n    var sortedRows = gridSortedRowEntriesSelector(apiRef);\n    return sortedRows.map(function (row) {\n      return row.model;\n    });\n  }, [apiRef]);\n  var getSortedRowIds = React.useCallback(function () {\n    return gridSortedRowIdsSelector(apiRef);\n  }, [apiRef]);\n  var getRowIndex = React.useCallback(function (id) {\n    return apiRef.current.getSortedRowIds().indexOf(id);\n  }, [apiRef]);\n  var getRowIdFromRowIndex = React.useCallback(function (index) {\n    return apiRef.current.getSortedRowIds()[index];\n  }, [apiRef]);\n  var sortApi = {\n    getSortModel: getSortModel,\n    getSortedRows: getSortedRows,\n    getSortedRowIds: getSortedRowIds,\n    getRowIndex: getRowIndex,\n    getRowIdFromRowIndex: getRowIdFromRowIndex,\n    setSortModel: setSortModel,\n    sortColumn: sortColumn,\n    applySorting: applySorting\n  };\n  useGridApiMethod(apiRef, sortApi, 'GridSortApi');\n  /**\n   * PRE-PROCESSING\n   */\n\n  var stateExportPreProcessing = React.useCallback(function (prevState, context) {\n    var _props$initialState2, _props$initialState2$;\n    var sortModelToExport = gridSortModelSelector(apiRef);\n    var shouldExportSortModel =\n    // Always export if the `exportOnlyDirtyModels` property is activated\n    !context.exportOnlyDirtyModels ||\n    // Always export if the model is controlled\n    props.sortModel != null ||\n    // Always export if the model has been initialized\n    ((_props$initialState2 = props.initialState) == null ? void 0 : (_props$initialState2$ = _props$initialState2.sorting) == null ? void 0 : _props$initialState2$.sortModel) != null ||\n    // Export if the model is not empty\n    sortModelToExport.length > 0;\n    if (!shouldExportSortModel) {\n      return prevState;\n    }\n    return _extends({}, prevState, {\n      sorting: {\n        sortModel: sortModelToExport\n      }\n    });\n  }, [apiRef, props.sortModel, (_props$initialState3 = props.initialState) == null ? void 0 : (_props$initialState3$ = _props$initialState3.sorting) == null ? void 0 : _props$initialState3$.sortModel]);\n  var stateRestorePreProcessing = React.useCallback(function (params, context) {\n    var _context$stateToResto;\n    var sortModel = (_context$stateToResto = context.stateToRestore.sorting) == null ? void 0 : _context$stateToResto.sortModel;\n    if (sortModel == null) {\n      return params;\n    }\n    apiRef.current.setState(mergeStateWithSortModel(sortModel, props.disableMultipleColumnsSorting));\n    return _extends({}, params, {\n      callbacks: [].concat(_toConsumableArray(params.callbacks), [apiRef.current.applySorting])\n    });\n  }, [apiRef, props.disableMultipleColumnsSorting]);\n  var flatSortingMethod = React.useCallback(function (params) {\n    var rowTree = gridRowTreeSelector(apiRef);\n    if (!params.sortRowList) {\n      var bodyRowIds = [];\n      var _footerRowIds = [];\n      gridRowIdsSelector(apiRef).forEach(function (rowId) {\n        if (rowTree[rowId].isPinned) {\n          return;\n        }\n        if (rowTree[rowId].position === 'footer') {\n          _footerRowIds.push(rowId);\n        } else {\n          bodyRowIds.push(rowId);\n        }\n      });\n      return [].concat(bodyRowIds, _footerRowIds);\n    }\n    var bodyRows = [];\n    var footerRowIds = [];\n    Object.values(rowTree).forEach(function (rowNode) {\n      if (rowNode.isPinned) {\n        return;\n      }\n      if (rowNode.position === 'footer') {\n        footerRowIds.push(rowNode.id);\n      } else {\n        bodyRows.push(rowNode);\n      }\n    });\n    return [].concat(_toConsumableArray(params.sortRowList(bodyRows)), footerRowIds);\n  }, [apiRef]);\n  useGridRegisterPipeProcessor(apiRef, 'exportState', stateExportPreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'restoreState', stateRestorePreProcessing);\n  useGridRegisterStrategyProcessor(apiRef, GRID_DEFAULT_STRATEGY, 'sorting', flatSortingMethod);\n  /**\n   * EVENTS\n   */\n\n  var handleColumnHeaderClick = React.useCallback(function (_ref2, event) {\n    var colDef = _ref2.colDef;\n    var allowMultipleSorting = event.shiftKey || event.metaKey || event.ctrlKey;\n    sortColumn(colDef, undefined, allowMultipleSorting);\n  }, [sortColumn]);\n  var handleColumnHeaderKeyDown = React.useCallback(function (_ref3, event) {\n    var colDef = _ref3.colDef;\n    // Ctrl + Enter opens the column menu\n    if (isEnterKey(event.key) && !event.ctrlKey && !event.metaKey) {\n      sortColumn(colDef, undefined, event.shiftKey);\n    }\n  }, [sortColumn]);\n  var handleColumnsChange = React.useCallback(function () {\n    // When the columns change we check that the sorted columns are still part of the dataset\n    var sortModel = gridSortModelSelector(apiRef);\n    var latestColumns = gridColumnLookupSelector(apiRef);\n    if (sortModel.length > 0) {\n      var newModel = sortModel.filter(function (sortItem) {\n        return latestColumns[sortItem.field];\n      });\n      if (newModel.length < sortModel.length) {\n        apiRef.current.setSortModel(newModel);\n      }\n    }\n  }, [apiRef]);\n  var handleStrategyProcessorChange = React.useCallback(function (methodName) {\n    if (methodName === 'sorting') {\n      apiRef.current.applySorting();\n    }\n  }, [apiRef]);\n  useGridApiEventHandler(apiRef, 'columnHeaderClick', handleColumnHeaderClick);\n  useGridApiEventHandler(apiRef, 'columnHeaderKeyDown', handleColumnHeaderKeyDown);\n  useGridApiEventHandler(apiRef, 'rowsSet', apiRef.current.applySorting);\n  useGridApiEventHandler(apiRef, 'columnsChange', handleColumnsChange);\n  useGridApiEventHandler(apiRef, 'activeStrategyProcessorChange', handleStrategyProcessorChange);\n  /**\n   * 1ST RENDER\n   */\n\n  useFirstRender(function () {\n    apiRef.current.applySorting();\n  });\n  /**\n   * EFFECTS\n   */\n\n  React.useEffect(function () {\n    if (props.sortModel !== undefined) {\n      apiRef.current.setSortModel(props.sortModel);\n    }\n  }, [apiRef, props.sortModel]);\n};","map":{"version":3,"names":["_extends","React","GridFeatureModeConstant","isEnterKey","useGridApiEventHandler","useGridApiMethod","useGridLogger","gridColumnLookupSelector","gridSortedRowEntriesSelector","gridSortedRowIdsSelector","gridSortModelSelector","gridRowIdsSelector","gridRowTreeSelector","useFirstRender","useGridRegisterStrategyProcessor","GRID_DEFAULT_STRATEGY","buildAggregatedSortingApplier","mergeStateWithSortModel","getNextGridSortDirection","sanitizeSortModel","useGridRegisterPipeProcessor","sortingStateInitializer","state","props","_ref","_props$sortModel","_props$initialState","_props$initialState$s","sortModel","initialState","sorting","disableMultipleColumnsSorting","sortedRows","useGridSorting","apiRef","_props$initialState3","_props$initialState3$","logger","current","unstable_registerControlState","stateId","propModel","propOnChange","onSortModelChange","stateSelector","changeEvent","upsertSortModel","useCallback","field","sortItem","existingIdx","findIndex","c","newSortModel","_toConsumableArray","splice","concat","createSortItem","col","directionOverride","_col$sortingOrder2","existing","find","_col$sortingOrder","nextSort","undefined","sortingOrder","sort","applySorting","setState","sortingMode","server","debug","instanceId","sortRowList","unstable_applyStrategyProcessor","publishEvent","forceUpdate","setSortModel","model","currentModel","sortColumn","column","direction","allowMultipleSorting","sortable","getSortModel","getSortedRows","map","row","getSortedRowIds","getRowIndex","id","indexOf","getRowIdFromRowIndex","index","sortApi","stateExportPreProcessing","prevState","context","_props$initialState2","_props$initialState2$","sortModelToExport","shouldExportSortModel","exportOnlyDirtyModels","length","stateRestorePreProcessing","params","_context$stateToResto","stateToRestore","callbacks","flatSortingMethod","rowTree","bodyRowIds","footerRowIds","forEach","rowId","isPinned","position","push","bodyRows","Object","values","rowNode","handleColumnHeaderClick","_ref2","event","colDef","shiftKey","metaKey","ctrlKey","handleColumnHeaderKeyDown","_ref3","key","handleColumnsChange","latestColumns","newModel","filter","handleStrategyProcessorChange","methodName","useEffect"],"sources":["/Users/guilherme/Downloads/react-loan-calculator-main/node_modules/@mui/x-data-grid/hooks/features/sorting/useGridSorting.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { GridFeatureModeConstant } from '../../../models/gridFeatureMode';\nimport { isEnterKey } from '../../../utils/keyboardUtils';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { gridColumnLookupSelector } from '../columns/gridColumnsSelector';\nimport { gridSortedRowEntriesSelector, gridSortedRowIdsSelector, gridSortModelSelector } from './gridSortingSelector';\nimport { gridRowIdsSelector, gridRowTreeSelector } from '../rows';\nimport { useFirstRender } from '../../utils/useFirstRender';\nimport { useGridRegisterStrategyProcessor, GRID_DEFAULT_STRATEGY } from '../../core/strategyProcessing';\nimport { buildAggregatedSortingApplier, mergeStateWithSortModel, getNextGridSortDirection, sanitizeSortModel } from './gridSortingUtils';\nimport { useGridRegisterPipeProcessor } from '../../core/pipeProcessing';\nexport const sortingStateInitializer = (state, props) => {\n  var _ref, _props$sortModel, _props$initialState, _props$initialState$s;\n\n  const sortModel = (_ref = (_props$sortModel = props.sortModel) != null ? _props$sortModel : (_props$initialState = props.initialState) == null ? void 0 : (_props$initialState$s = _props$initialState.sorting) == null ? void 0 : _props$initialState$s.sortModel) != null ? _ref : [];\n  return _extends({}, state, {\n    sorting: {\n      sortModel: sanitizeSortModel(sortModel, props.disableMultipleColumnsSorting),\n      sortedRows: []\n    }\n  });\n};\n/**\n * @requires useGridRows (event)\n * @requires useGridColumns (event)\n */\n\nexport const useGridSorting = (apiRef, props) => {\n  var _props$initialState3, _props$initialState3$;\n\n  const logger = useGridLogger(apiRef, 'useGridSorting');\n  apiRef.current.unstable_registerControlState({\n    stateId: 'sortModel',\n    propModel: props.sortModel,\n    propOnChange: props.onSortModelChange,\n    stateSelector: gridSortModelSelector,\n    changeEvent: 'sortModelChange'\n  });\n  const upsertSortModel = React.useCallback((field, sortItem) => {\n    const sortModel = gridSortModelSelector(apiRef);\n    const existingIdx = sortModel.findIndex(c => c.field === field);\n    let newSortModel = [...sortModel];\n\n    if (existingIdx > -1) {\n      if (!sortItem) {\n        newSortModel.splice(existingIdx, 1);\n      } else {\n        newSortModel.splice(existingIdx, 1, sortItem);\n      }\n    } else {\n      newSortModel = [...sortModel, sortItem];\n    }\n\n    return newSortModel;\n  }, [apiRef]);\n  const createSortItem = React.useCallback((col, directionOverride) => {\n    var _col$sortingOrder2;\n\n    const sortModel = gridSortModelSelector(apiRef);\n    const existing = sortModel.find(c => c.field === col.field);\n\n    if (existing) {\n      var _col$sortingOrder;\n\n      const nextSort = directionOverride === undefined ? getNextGridSortDirection((_col$sortingOrder = col.sortingOrder) != null ? _col$sortingOrder : props.sortingOrder, existing.sort) : directionOverride;\n      return nextSort == null ? undefined : _extends({}, existing, {\n        sort: nextSort\n      });\n    }\n\n    return {\n      field: col.field,\n      sort: directionOverride === undefined ? getNextGridSortDirection((_col$sortingOrder2 = col.sortingOrder) != null ? _col$sortingOrder2 : props.sortingOrder) : directionOverride\n    };\n  }, [apiRef, props.sortingOrder]);\n  /**\n   * API METHODS\n   */\n\n  const applySorting = React.useCallback(() => {\n    apiRef.current.setState(state => {\n      if (props.sortingMode === GridFeatureModeConstant.server) {\n        logger.debug('Skipping sorting rows as sortingMode = server');\n        return _extends({}, state, {\n          sorting: _extends({}, state.sorting, {\n            sortedRows: gridRowIdsSelector(state, apiRef.current.instanceId)\n          })\n        });\n      }\n\n      const sortModel = gridSortModelSelector(state, apiRef.current.instanceId);\n      const sortRowList = buildAggregatedSortingApplier(sortModel, apiRef);\n      const sortedRows = apiRef.current.unstable_applyStrategyProcessor('sorting', {\n        sortRowList\n      });\n      return _extends({}, state, {\n        sorting: _extends({}, state.sorting, {\n          sortedRows\n        })\n      });\n    });\n    apiRef.current.publishEvent('sortedRowsSet');\n    apiRef.current.forceUpdate();\n  }, [apiRef, logger, props.sortingMode]);\n  const setSortModel = React.useCallback(model => {\n    const currentModel = gridSortModelSelector(apiRef);\n\n    if (currentModel !== model) {\n      logger.debug(`Setting sort model`);\n      apiRef.current.setState(mergeStateWithSortModel(model, props.disableMultipleColumnsSorting));\n      apiRef.current.forceUpdate();\n      apiRef.current.applySorting();\n    }\n  }, [apiRef, logger, props.disableMultipleColumnsSorting]);\n  const sortColumn = React.useCallback((column, direction, allowMultipleSorting) => {\n    if (!column.sortable) {\n      return;\n    }\n\n    const sortItem = createSortItem(column, direction);\n    let sortModel;\n\n    if (!allowMultipleSorting || props.disableMultipleColumnsSorting) {\n      sortModel = !sortItem ? [] : [sortItem];\n    } else {\n      sortModel = upsertSortModel(column.field, sortItem);\n    }\n\n    apiRef.current.setSortModel(sortModel);\n  }, [apiRef, upsertSortModel, createSortItem, props.disableMultipleColumnsSorting]);\n  const getSortModel = React.useCallback(() => gridSortModelSelector(apiRef), [apiRef]);\n  const getSortedRows = React.useCallback(() => {\n    const sortedRows = gridSortedRowEntriesSelector(apiRef);\n    return sortedRows.map(row => row.model);\n  }, [apiRef]);\n  const getSortedRowIds = React.useCallback(() => gridSortedRowIdsSelector(apiRef), [apiRef]);\n  const getRowIndex = React.useCallback(id => apiRef.current.getSortedRowIds().indexOf(id), [apiRef]);\n  const getRowIdFromRowIndex = React.useCallback(index => apiRef.current.getSortedRowIds()[index], [apiRef]);\n  const sortApi = {\n    getSortModel,\n    getSortedRows,\n    getSortedRowIds,\n    getRowIndex,\n    getRowIdFromRowIndex,\n    setSortModel,\n    sortColumn,\n    applySorting\n  };\n  useGridApiMethod(apiRef, sortApi, 'GridSortApi');\n  /**\n   * PRE-PROCESSING\n   */\n\n  const stateExportPreProcessing = React.useCallback((prevState, context) => {\n    var _props$initialState2, _props$initialState2$;\n\n    const sortModelToExport = gridSortModelSelector(apiRef);\n    const shouldExportSortModel = // Always export if the `exportOnlyDirtyModels` property is activated\n    !context.exportOnlyDirtyModels || // Always export if the model is controlled\n    props.sortModel != null || // Always export if the model has been initialized\n    ((_props$initialState2 = props.initialState) == null ? void 0 : (_props$initialState2$ = _props$initialState2.sorting) == null ? void 0 : _props$initialState2$.sortModel) != null || // Export if the model is not empty\n    sortModelToExport.length > 0;\n\n    if (!shouldExportSortModel) {\n      return prevState;\n    }\n\n    return _extends({}, prevState, {\n      sorting: {\n        sortModel: sortModelToExport\n      }\n    });\n  }, [apiRef, props.sortModel, (_props$initialState3 = props.initialState) == null ? void 0 : (_props$initialState3$ = _props$initialState3.sorting) == null ? void 0 : _props$initialState3$.sortModel]);\n  const stateRestorePreProcessing = React.useCallback((params, context) => {\n    var _context$stateToResto;\n\n    const sortModel = (_context$stateToResto = context.stateToRestore.sorting) == null ? void 0 : _context$stateToResto.sortModel;\n\n    if (sortModel == null) {\n      return params;\n    }\n\n    apiRef.current.setState(mergeStateWithSortModel(sortModel, props.disableMultipleColumnsSorting));\n    return _extends({}, params, {\n      callbacks: [...params.callbacks, apiRef.current.applySorting]\n    });\n  }, [apiRef, props.disableMultipleColumnsSorting]);\n  const flatSortingMethod = React.useCallback(params => {\n    const rowTree = gridRowTreeSelector(apiRef);\n\n    if (!params.sortRowList) {\n      const bodyRowIds = [];\n      const footerRowIds = [];\n      gridRowIdsSelector(apiRef).forEach(rowId => {\n        if (rowTree[rowId].isPinned) {\n          return;\n        }\n\n        if (rowTree[rowId].position === 'footer') {\n          footerRowIds.push(rowId);\n        } else {\n          bodyRowIds.push(rowId);\n        }\n      });\n      return [...bodyRowIds, ...footerRowIds];\n    }\n\n    const bodyRows = [];\n    const footerRowIds = [];\n    Object.values(rowTree).forEach(rowNode => {\n      if (rowNode.isPinned) {\n        return;\n      }\n\n      if (rowNode.position === 'footer') {\n        footerRowIds.push(rowNode.id);\n      } else {\n        bodyRows.push(rowNode);\n      }\n    });\n    return [...params.sortRowList(bodyRows), ...footerRowIds];\n  }, [apiRef]);\n  useGridRegisterPipeProcessor(apiRef, 'exportState', stateExportPreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'restoreState', stateRestorePreProcessing);\n  useGridRegisterStrategyProcessor(apiRef, GRID_DEFAULT_STRATEGY, 'sorting', flatSortingMethod);\n  /**\n   * EVENTS\n   */\n\n  const handleColumnHeaderClick = React.useCallback(({\n    colDef\n  }, event) => {\n    const allowMultipleSorting = event.shiftKey || event.metaKey || event.ctrlKey;\n    sortColumn(colDef, undefined, allowMultipleSorting);\n  }, [sortColumn]);\n  const handleColumnHeaderKeyDown = React.useCallback(({\n    colDef\n  }, event) => {\n    // Ctrl + Enter opens the column menu\n    if (isEnterKey(event.key) && !event.ctrlKey && !event.metaKey) {\n      sortColumn(colDef, undefined, event.shiftKey);\n    }\n  }, [sortColumn]);\n  const handleColumnsChange = React.useCallback(() => {\n    // When the columns change we check that the sorted columns are still part of the dataset\n    const sortModel = gridSortModelSelector(apiRef);\n    const latestColumns = gridColumnLookupSelector(apiRef);\n\n    if (sortModel.length > 0) {\n      const newModel = sortModel.filter(sortItem => latestColumns[sortItem.field]);\n\n      if (newModel.length < sortModel.length) {\n        apiRef.current.setSortModel(newModel);\n      }\n    }\n  }, [apiRef]);\n  const handleStrategyProcessorChange = React.useCallback(methodName => {\n    if (methodName === 'sorting') {\n      apiRef.current.applySorting();\n    }\n  }, [apiRef]);\n  useGridApiEventHandler(apiRef, 'columnHeaderClick', handleColumnHeaderClick);\n  useGridApiEventHandler(apiRef, 'columnHeaderKeyDown', handleColumnHeaderKeyDown);\n  useGridApiEventHandler(apiRef, 'rowsSet', apiRef.current.applySorting);\n  useGridApiEventHandler(apiRef, 'columnsChange', handleColumnsChange);\n  useGridApiEventHandler(apiRef, 'activeStrategyProcessorChange', handleStrategyProcessorChange);\n  /**\n   * 1ST RENDER\n   */\n\n  useFirstRender(() => {\n    apiRef.current.applySorting();\n  });\n  /**\n   * EFFECTS\n   */\n\n  React.useEffect(() => {\n    if (props.sortModel !== undefined) {\n      apiRef.current.setSortModel(props.sortModel);\n    }\n  }, [apiRef, props.sortModel]);\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}