{"ast":null,"code":"import _toConsumableArray from \"/Users/guilherme/Downloads/react-loan-calculator-main/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { GridFeatureModeConstant } from '../../../models/gridFeatureMode';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { gridFilterableColumnLookupSelector } from '../columns/gridColumnsSelector';\nimport { GridPreferencePanelsValue } from '../preferencesPanel/gridPreferencePanelsValue';\nimport { getDefaultGridFilterModel } from './gridFilterState';\nimport { gridFilterModelSelector, gridVisibleSortedRowEntriesSelector } from './gridFilterSelector';\nimport { useFirstRender } from '../../utils/useFirstRender';\nimport { gridRowIdsSelector } from '../rows';\nimport { useGridRegisterPipeProcessor } from '../../core/pipeProcessing';\nimport { GRID_DEFAULT_STRATEGY, useGridRegisterStrategyProcessor } from '../../core/strategyProcessing';\nimport { buildAggregatedFilterApplier, sanitizeFilterModel, mergeStateWithFilterModel, cleanFilterItem, passFilterLogic } from './gridFilterUtils';\nimport { isDeepEqual } from '../../../utils/utils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport var filterStateInitializer = function filterStateInitializer(state, props, apiRef) {\n  var _ref, _props$filterModel, _props$initialState, _props$initialState$f;\n  var filterModel = (_ref = (_props$filterModel = props.filterModel) != null ? _props$filterModel : (_props$initialState = props.initialState) == null ? void 0 : (_props$initialState$f = _props$initialState.filter) == null ? void 0 : _props$initialState$f.filterModel) != null ? _ref : getDefaultGridFilterModel();\n  return _extends({}, state, {\n    filter: {\n      filterModel: sanitizeFilterModel(filterModel, props.disableMultipleColumnsFiltering, apiRef),\n      visibleRowsLookup: {},\n      filteredDescendantCountLookup: {}\n    }\n  });\n};\n/**\n * @requires useGridColumns (method, event)\n * @requires useGridParamsApi (method)\n * @requires useGridRows (event)\n */\n\nexport var useGridFilter = function useGridFilter(apiRef, props) {\n  var _props$initialState3, _props$initialState3$, _props$componentsProp2;\n  var logger = useGridLogger(apiRef, 'useGridFilter');\n  apiRef.current.unstable_registerControlState({\n    stateId: 'filter',\n    propModel: props.filterModel,\n    propOnChange: props.onFilterModelChange,\n    stateSelector: gridFilterModelSelector,\n    changeEvent: 'filterModelChange'\n  });\n  var updateFilteredRows = React.useCallback(function () {\n    apiRef.current.setState(function (state) {\n      var filterModel = gridFilterModelSelector(state, apiRef.current.instanceId);\n      var isRowMatchingFilters = props.filterMode === GridFeatureModeConstant.client ? buildAggregatedFilterApplier(filterModel, apiRef) : null;\n      var filteringResult = apiRef.current.unstable_applyStrategyProcessor('filtering', {\n        isRowMatchingFilters: isRowMatchingFilters,\n        filterModel: filterModel != null ? filterModel : getDefaultGridFilterModel()\n      });\n      return _extends({}, state, {\n        filter: _extends({}, state.filter, filteringResult)\n      });\n    });\n    apiRef.current.publishEvent('filteredRowsSet');\n  }, [props.filterMode, apiRef]);\n  /**\n   * API METHODS\n   */\n\n  var applyFilters = React.useCallback(function () {\n    updateFilteredRows();\n    apiRef.current.forceUpdate();\n  }, [apiRef, updateFilteredRows]);\n  var upsertFilterItem = React.useCallback(function (item) {\n    var filterModel = gridFilterModelSelector(apiRef);\n    var items = _toConsumableArray(filterModel.items);\n    var itemIndex = items.findIndex(function (filterItem) {\n      return filterItem.id === item.id;\n    });\n    if (itemIndex === -1) {\n      items.push(item);\n    } else {\n      items[itemIndex] = item;\n    }\n    apiRef.current.setFilterModel(_extends({}, filterModel, {\n      items: items\n    }), 'upsertFilterItem');\n  }, [apiRef]);\n  var upsertFilterItems = React.useCallback(function (items) {\n    var filterModel = gridFilterModelSelector(apiRef);\n    var existingItems = _toConsumableArray(filterModel.items);\n    items.forEach(function (item) {\n      var itemIndex = items.findIndex(function (filterItem) {\n        return filterItem.id === item.id;\n      });\n      if (itemIndex === -1) {\n        existingItems.push(item);\n      } else {\n        existingItems[itemIndex] = item;\n      }\n    });\n    apiRef.current.setFilterModel(_extends({}, filterModel, {\n      items: items\n    }), 'upsertFilterItems');\n  }, [apiRef]);\n  var deleteFilterItem = React.useCallback(function (itemToDelete) {\n    var filterModel = gridFilterModelSelector(apiRef);\n    var items = filterModel.items.filter(function (item) {\n      return item.id !== itemToDelete.id;\n    });\n    if (items.length === filterModel.items.length) {\n      return;\n    }\n    apiRef.current.setFilterModel(_extends({}, filterModel, {\n      items: items\n    }), 'deleteFilterItem');\n  }, [apiRef]);\n  var showFilterPanel = React.useCallback(function (targetColumnField) {\n    logger.debug('Displaying filter panel');\n    if (targetColumnField) {\n      var filterModel = gridFilterModelSelector(apiRef);\n      var filterItemsWithValue = filterModel.items.filter(function (item) {\n        var _column$filterOperato;\n        if (item.value !== undefined) {\n          return true;\n        }\n        var column = apiRef.current.getColumn(item.columnField);\n        var filterOperator = (_column$filterOperato = column.filterOperators) == null ? void 0 : _column$filterOperato.find(function (operator) {\n          return operator.value === item.operatorValue;\n        });\n        var requiresFilterValue = typeof (filterOperator == null ? void 0 : filterOperator.requiresFilterValue) === 'undefined' ? true : filterOperator == null ? void 0 : filterOperator.requiresFilterValue; // Operators like `isEmpty` don't have and don't require `item.value`.\n        // So we don't want to remove them from the filter model if `item.value === undefined`.\n        // See https://github.com/mui/mui-x/issues/5402\n\n        if (requiresFilterValue) {\n          return false;\n        }\n        return true;\n      });\n      var newFilterItems;\n      var filterItemOnTarget = filterItemsWithValue.find(function (item) {\n        return item.columnField === targetColumnField;\n      });\n      if (filterItemOnTarget) {\n        newFilterItems = filterItemsWithValue;\n      } else if (props.disableMultipleColumnsFiltering) {\n        newFilterItems = [cleanFilterItem({\n          columnField: targetColumnField\n        }, apiRef)];\n      } else {\n        newFilterItems = [].concat(_toConsumableArray(filterItemsWithValue), [cleanFilterItem({\n          columnField: targetColumnField\n        }, apiRef)]);\n      }\n      apiRef.current.setFilterModel(_extends({}, filterModel, {\n        items: newFilterItems\n      }));\n    }\n    apiRef.current.showPreferences(GridPreferencePanelsValue.filters);\n  }, [apiRef, logger, props.disableMultipleColumnsFiltering]);\n  var hideFilterPanel = React.useCallback(function () {\n    logger.debug('Hiding filter panel');\n    apiRef.current.hidePreferences();\n  }, [apiRef, logger]);\n  var setFilterLinkOperator = React.useCallback(function (linkOperator) {\n    var filterModel = gridFilterModelSelector(apiRef);\n    if (filterModel.linkOperator === linkOperator) {\n      return;\n    }\n    apiRef.current.setFilterModel(_extends({}, filterModel, {\n      linkOperator: linkOperator\n    }), 'changeLogicOperator');\n  }, [apiRef]);\n  var setQuickFilterValues = React.useCallback(function (values) {\n    var filterModel = gridFilterModelSelector(apiRef);\n    if (isDeepEqual(filterModel.quickFilterValues, values)) {\n      return;\n    }\n    apiRef.current.setFilterModel(_extends({}, filterModel, {\n      quickFilterValues: _toConsumableArray(values)\n    }));\n  }, [apiRef]);\n  var setFilterModel = React.useCallback(function (model, reason) {\n    var currentModel = gridFilterModelSelector(apiRef);\n    if (currentModel !== model) {\n      logger.debug('Setting filter model');\n      apiRef.current.unstable_updateControlState('filter', mergeStateWithFilterModel(model, props.disableMultipleColumnsFiltering, apiRef), reason);\n      apiRef.current.unstable_applyFilters();\n    }\n  }, [apiRef, logger, props.disableMultipleColumnsFiltering]);\n  var getVisibleRowModels = React.useCallback(function () {\n    var visibleSortedRows = gridVisibleSortedRowEntriesSelector(apiRef);\n    return new Map(visibleSortedRows.map(function (row) {\n      return [row.id, row.model];\n    }));\n  }, [apiRef]);\n  var filterApi = {\n    setFilterLinkOperator: setFilterLinkOperator,\n    unstable_applyFilters: applyFilters,\n    deleteFilterItem: deleteFilterItem,\n    upsertFilterItem: upsertFilterItem,\n    upsertFilterItems: upsertFilterItems,\n    setFilterModel: setFilterModel,\n    showFilterPanel: showFilterPanel,\n    hideFilterPanel: hideFilterPanel,\n    getVisibleRowModels: getVisibleRowModels,\n    setQuickFilterValues: setQuickFilterValues\n  };\n  useGridApiMethod(apiRef, filterApi, 'GridFilterApi');\n  /**\n   * PRE-PROCESSING\n   */\n\n  var stateExportPreProcessing = React.useCallback(function (prevState, context) {\n    var _props$initialState2, _props$initialState2$;\n    var filterModelToExport = gridFilterModelSelector(apiRef);\n    var shouldExportFilterModel =\n    // Always export if the `exportOnlyDirtyModels` property is activated\n    !context.exportOnlyDirtyModels ||\n    // Always export if the model is controlled\n    props.filterModel != null ||\n    // Always export if the model has been initialized\n    ((_props$initialState2 = props.initialState) == null ? void 0 : (_props$initialState2$ = _props$initialState2.filter) == null ? void 0 : _props$initialState2$.filterModel) != null ||\n    // Export if the model is not equal to the default value\n    !isDeepEqual(filterModelToExport, getDefaultGridFilterModel());\n    if (!shouldExportFilterModel) {\n      return prevState;\n    }\n    return _extends({}, prevState, {\n      filter: {\n        filterModel: filterModelToExport\n      }\n    });\n  }, [apiRef, props.filterModel, (_props$initialState3 = props.initialState) == null ? void 0 : (_props$initialState3$ = _props$initialState3.filter) == null ? void 0 : _props$initialState3$.filterModel]);\n  var stateRestorePreProcessing = React.useCallback(function (params, context) {\n    var _context$stateToResto;\n    var filterModel = (_context$stateToResto = context.stateToRestore.filter) == null ? void 0 : _context$stateToResto.filterModel;\n    if (filterModel == null) {\n      return params;\n    }\n    apiRef.current.unstable_updateControlState('filter', mergeStateWithFilterModel(filterModel, props.disableMultipleColumnsFiltering, apiRef), 'restoreState');\n    return _extends({}, params, {\n      callbacks: [].concat(_toConsumableArray(params.callbacks), [apiRef.current.unstable_applyFilters])\n    });\n  }, [apiRef, props.disableMultipleColumnsFiltering]);\n  var preferencePanelPreProcessing = React.useCallback(function (initialValue, value) {\n    if (value === GridPreferencePanelsValue.filters) {\n      var _props$componentsProp;\n      var FilterPanel = props.components.FilterPanel;\n      return /*#__PURE__*/_jsx(FilterPanel, _extends({}, (_props$componentsProp = props.componentsProps) == null ? void 0 : _props$componentsProp.filterPanel));\n    }\n    return initialValue;\n  }, [props.components.FilterPanel, (_props$componentsProp2 = props.componentsProps) == null ? void 0 : _props$componentsProp2.filterPanel]);\n  var flatFilteringMethod = React.useCallback(function (params) {\n    if (props.filterMode === GridFeatureModeConstant.client && params.isRowMatchingFilters) {\n      var rowIds = gridRowIdsSelector(apiRef);\n      var filteredRowsLookup = {};\n      for (var i = 0; i < rowIds.length; i += 1) {\n        var rowId = rowIds[i];\n        var isRowPassing = void 0;\n        if (typeof rowId === 'string' && rowId.startsWith('auto-generated-group-footer')) {\n          isRowPassing = true;\n        } else {\n          var _params$isRowMatching = params.isRowMatchingFilters(rowId),\n            passingFilterItems = _params$isRowMatching.passingFilterItems,\n            passingQuickFilterValues = _params$isRowMatching.passingQuickFilterValues;\n          isRowPassing = passFilterLogic([passingFilterItems], [passingQuickFilterValues], params.filterModel, apiRef);\n        }\n        filteredRowsLookup[rowId] = isRowPassing;\n      }\n      return {\n        filteredRowsLookup: filteredRowsLookup,\n        // For flat tree, the `visibleRowsLookup` and the `filteredRowsLookup` since no row is collapsed.\n        visibleRowsLookup: filteredRowsLookup,\n        filteredDescendantCountLookup: {}\n      };\n    }\n    return {\n      visibleRowsLookup: {},\n      filteredRowsLookup: {},\n      filteredDescendantCountLookup: {}\n    };\n  }, [apiRef, props.filterMode]);\n  useGridRegisterPipeProcessor(apiRef, 'exportState', stateExportPreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'restoreState', stateRestorePreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'preferencePanel', preferencePanelPreProcessing);\n  useGridRegisterStrategyProcessor(apiRef, GRID_DEFAULT_STRATEGY, 'filtering', flatFilteringMethod);\n  /**\n   * EVENTS\n   */\n\n  var handleColumnsChange = React.useCallback(function () {\n    logger.debug('onColUpdated - GridColumns changed, applying filters');\n    var filterModel = gridFilterModelSelector(apiRef);\n    var filterableColumnsLookup = gridFilterableColumnLookupSelector(apiRef);\n    var newFilterItems = filterModel.items.filter(function (item) {\n      return item.columnField && filterableColumnsLookup[item.columnField];\n    });\n    if (newFilterItems.length < filterModel.items.length) {\n      apiRef.current.setFilterModel(_extends({}, filterModel, {\n        items: newFilterItems\n      }));\n    }\n  }, [apiRef, logger]);\n  var handleStrategyProcessorChange = React.useCallback(function (methodName) {\n    if (methodName === 'filtering') {\n      apiRef.current.unstable_applyFilters();\n    }\n  }, [apiRef]); // Do not call `apiRef.current.forceUpdate` to avoid re-render before updating the sorted rows.\n  // Otherwise, the state is not consistent during the render\n\n  useGridApiEventHandler(apiRef, 'rowsSet', updateFilteredRows);\n  useGridApiEventHandler(apiRef, 'rowExpansionChange', apiRef.current.unstable_applyFilters);\n  useGridApiEventHandler(apiRef, 'columnsChange', handleColumnsChange);\n  useGridApiEventHandler(apiRef, 'activeStrategyProcessorChange', handleStrategyProcessorChange);\n  /**\n   * 1ST RENDER\n   */\n\n  useFirstRender(function () {\n    apiRef.current.unstable_applyFilters();\n  });\n  /**\n   * EFFECTS\n   */\n\n  React.useEffect(function () {\n    if (props.filterModel !== undefined) {\n      apiRef.current.setFilterModel(props.filterModel);\n    }\n  }, [apiRef, logger, props.filterModel]);\n};","map":{"version":3,"names":["_extends","React","GridFeatureModeConstant","useGridApiEventHandler","useGridApiMethod","useGridLogger","gridFilterableColumnLookupSelector","GridPreferencePanelsValue","getDefaultGridFilterModel","gridFilterModelSelector","gridVisibleSortedRowEntriesSelector","useFirstRender","gridRowIdsSelector","useGridRegisterPipeProcessor","GRID_DEFAULT_STRATEGY","useGridRegisterStrategyProcessor","buildAggregatedFilterApplier","sanitizeFilterModel","mergeStateWithFilterModel","cleanFilterItem","passFilterLogic","isDeepEqual","jsx","_jsx","filterStateInitializer","state","props","apiRef","_ref","_props$filterModel","_props$initialState","_props$initialState$f","filterModel","initialState","filter","disableMultipleColumnsFiltering","visibleRowsLookup","filteredDescendantCountLookup","useGridFilter","_props$initialState3","_props$initialState3$","_props$componentsProp2","logger","current","unstable_registerControlState","stateId","propModel","propOnChange","onFilterModelChange","stateSelector","changeEvent","updateFilteredRows","useCallback","setState","instanceId","isRowMatchingFilters","filterMode","client","filteringResult","unstable_applyStrategyProcessor","publishEvent","applyFilters","forceUpdate","upsertFilterItem","item","items","_toConsumableArray","itemIndex","findIndex","filterItem","id","push","setFilterModel","upsertFilterItems","existingItems","forEach","deleteFilterItem","itemToDelete","length","showFilterPanel","targetColumnField","debug","filterItemsWithValue","_column$filterOperato","value","undefined","column","getColumn","columnField","filterOperator","filterOperators","find","operator","operatorValue","requiresFilterValue","newFilterItems","filterItemOnTarget","concat","showPreferences","filters","hideFilterPanel","hidePreferences","setFilterLinkOperator","linkOperator","setQuickFilterValues","values","quickFilterValues","model","reason","currentModel","unstable_updateControlState","unstable_applyFilters","getVisibleRowModels","visibleSortedRows","Map","map","row","filterApi","stateExportPreProcessing","prevState","context","_props$initialState2","_props$initialState2$","filterModelToExport","shouldExportFilterModel","exportOnlyDirtyModels","stateRestorePreProcessing","params","_context$stateToResto","stateToRestore","callbacks","preferencePanelPreProcessing","initialValue","_props$componentsProp","FilterPanel","components","componentsProps","filterPanel","flatFilteringMethod","rowIds","filteredRowsLookup","i","rowId","isRowPassing","startsWith","_params$isRowMatching","passingFilterItems","passingQuickFilterValues","handleColumnsChange","filterableColumnsLookup","handleStrategyProcessorChange","methodName","useEffect"],"sources":["/Users/guilherme/Downloads/react-loan-calculator-main/node_modules/@mui/x-data-grid/hooks/features/filter/useGridFilter.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { GridFeatureModeConstant } from '../../../models/gridFeatureMode';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { gridFilterableColumnLookupSelector } from '../columns/gridColumnsSelector';\nimport { GridPreferencePanelsValue } from '../preferencesPanel/gridPreferencePanelsValue';\nimport { getDefaultGridFilterModel } from './gridFilterState';\nimport { gridFilterModelSelector, gridVisibleSortedRowEntriesSelector } from './gridFilterSelector';\nimport { useFirstRender } from '../../utils/useFirstRender';\nimport { gridRowIdsSelector } from '../rows';\nimport { useGridRegisterPipeProcessor } from '../../core/pipeProcessing';\nimport { GRID_DEFAULT_STRATEGY, useGridRegisterStrategyProcessor } from '../../core/strategyProcessing';\nimport { buildAggregatedFilterApplier, sanitizeFilterModel, mergeStateWithFilterModel, cleanFilterItem, passFilterLogic } from './gridFilterUtils';\nimport { isDeepEqual } from '../../../utils/utils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const filterStateInitializer = (state, props, apiRef) => {\n  var _ref, _props$filterModel, _props$initialState, _props$initialState$f;\n\n  const filterModel = (_ref = (_props$filterModel = props.filterModel) != null ? _props$filterModel : (_props$initialState = props.initialState) == null ? void 0 : (_props$initialState$f = _props$initialState.filter) == null ? void 0 : _props$initialState$f.filterModel) != null ? _ref : getDefaultGridFilterModel();\n  return _extends({}, state, {\n    filter: {\n      filterModel: sanitizeFilterModel(filterModel, props.disableMultipleColumnsFiltering, apiRef),\n      visibleRowsLookup: {},\n      filteredDescendantCountLookup: {}\n    }\n  });\n};\n/**\n * @requires useGridColumns (method, event)\n * @requires useGridParamsApi (method)\n * @requires useGridRows (event)\n */\n\nexport const useGridFilter = (apiRef, props) => {\n  var _props$initialState3, _props$initialState3$, _props$componentsProp2;\n\n  const logger = useGridLogger(apiRef, 'useGridFilter');\n  apiRef.current.unstable_registerControlState({\n    stateId: 'filter',\n    propModel: props.filterModel,\n    propOnChange: props.onFilterModelChange,\n    stateSelector: gridFilterModelSelector,\n    changeEvent: 'filterModelChange'\n  });\n  const updateFilteredRows = React.useCallback(() => {\n    apiRef.current.setState(state => {\n      const filterModel = gridFilterModelSelector(state, apiRef.current.instanceId);\n      const isRowMatchingFilters = props.filterMode === GridFeatureModeConstant.client ? buildAggregatedFilterApplier(filterModel, apiRef) : null;\n      const filteringResult = apiRef.current.unstable_applyStrategyProcessor('filtering', {\n        isRowMatchingFilters,\n        filterModel: filterModel != null ? filterModel : getDefaultGridFilterModel()\n      });\n      return _extends({}, state, {\n        filter: _extends({}, state.filter, filteringResult)\n      });\n    });\n    apiRef.current.publishEvent('filteredRowsSet');\n  }, [props.filterMode, apiRef]);\n  /**\n   * API METHODS\n   */\n\n  const applyFilters = React.useCallback(() => {\n    updateFilteredRows();\n    apiRef.current.forceUpdate();\n  }, [apiRef, updateFilteredRows]);\n  const upsertFilterItem = React.useCallback(item => {\n    const filterModel = gridFilterModelSelector(apiRef);\n    const items = [...filterModel.items];\n    const itemIndex = items.findIndex(filterItem => filterItem.id === item.id);\n\n    if (itemIndex === -1) {\n      items.push(item);\n    } else {\n      items[itemIndex] = item;\n    }\n\n    apiRef.current.setFilterModel(_extends({}, filterModel, {\n      items\n    }), 'upsertFilterItem');\n  }, [apiRef]);\n  const upsertFilterItems = React.useCallback(items => {\n    const filterModel = gridFilterModelSelector(apiRef);\n    const existingItems = [...filterModel.items];\n    items.forEach(item => {\n      const itemIndex = items.findIndex(filterItem => filterItem.id === item.id);\n\n      if (itemIndex === -1) {\n        existingItems.push(item);\n      } else {\n        existingItems[itemIndex] = item;\n      }\n    });\n    apiRef.current.setFilterModel(_extends({}, filterModel, {\n      items\n    }), 'upsertFilterItems');\n  }, [apiRef]);\n  const deleteFilterItem = React.useCallback(itemToDelete => {\n    const filterModel = gridFilterModelSelector(apiRef);\n    const items = filterModel.items.filter(item => item.id !== itemToDelete.id);\n\n    if (items.length === filterModel.items.length) {\n      return;\n    }\n\n    apiRef.current.setFilterModel(_extends({}, filterModel, {\n      items\n    }), 'deleteFilterItem');\n  }, [apiRef]);\n  const showFilterPanel = React.useCallback(targetColumnField => {\n    logger.debug('Displaying filter panel');\n\n    if (targetColumnField) {\n      const filterModel = gridFilterModelSelector(apiRef);\n      const filterItemsWithValue = filterModel.items.filter(item => {\n        var _column$filterOperato;\n\n        if (item.value !== undefined) {\n          return true;\n        }\n\n        const column = apiRef.current.getColumn(item.columnField);\n        const filterOperator = (_column$filterOperato = column.filterOperators) == null ? void 0 : _column$filterOperato.find(operator => operator.value === item.operatorValue);\n        const requiresFilterValue = typeof (filterOperator == null ? void 0 : filterOperator.requiresFilterValue) === 'undefined' ? true : filterOperator == null ? void 0 : filterOperator.requiresFilterValue; // Operators like `isEmpty` don't have and don't require `item.value`.\n        // So we don't want to remove them from the filter model if `item.value === undefined`.\n        // See https://github.com/mui/mui-x/issues/5402\n\n        if (requiresFilterValue) {\n          return false;\n        }\n\n        return true;\n      });\n      let newFilterItems;\n      const filterItemOnTarget = filterItemsWithValue.find(item => item.columnField === targetColumnField);\n\n      if (filterItemOnTarget) {\n        newFilterItems = filterItemsWithValue;\n      } else if (props.disableMultipleColumnsFiltering) {\n        newFilterItems = [cleanFilterItem({\n          columnField: targetColumnField\n        }, apiRef)];\n      } else {\n        newFilterItems = [...filterItemsWithValue, cleanFilterItem({\n          columnField: targetColumnField\n        }, apiRef)];\n      }\n\n      apiRef.current.setFilterModel(_extends({}, filterModel, {\n        items: newFilterItems\n      }));\n    }\n\n    apiRef.current.showPreferences(GridPreferencePanelsValue.filters);\n  }, [apiRef, logger, props.disableMultipleColumnsFiltering]);\n  const hideFilterPanel = React.useCallback(() => {\n    logger.debug('Hiding filter panel');\n    apiRef.current.hidePreferences();\n  }, [apiRef, logger]);\n  const setFilterLinkOperator = React.useCallback(linkOperator => {\n    const filterModel = gridFilterModelSelector(apiRef);\n\n    if (filterModel.linkOperator === linkOperator) {\n      return;\n    }\n\n    apiRef.current.setFilterModel(_extends({}, filterModel, {\n      linkOperator\n    }), 'changeLogicOperator');\n  }, [apiRef]);\n  const setQuickFilterValues = React.useCallback(values => {\n    const filterModel = gridFilterModelSelector(apiRef);\n\n    if (isDeepEqual(filterModel.quickFilterValues, values)) {\n      return;\n    }\n\n    apiRef.current.setFilterModel(_extends({}, filterModel, {\n      quickFilterValues: [...values]\n    }));\n  }, [apiRef]);\n  const setFilterModel = React.useCallback((model, reason) => {\n    const currentModel = gridFilterModelSelector(apiRef);\n\n    if (currentModel !== model) {\n      logger.debug('Setting filter model');\n      apiRef.current.unstable_updateControlState('filter', mergeStateWithFilterModel(model, props.disableMultipleColumnsFiltering, apiRef), reason);\n      apiRef.current.unstable_applyFilters();\n    }\n  }, [apiRef, logger, props.disableMultipleColumnsFiltering]);\n  const getVisibleRowModels = React.useCallback(() => {\n    const visibleSortedRows = gridVisibleSortedRowEntriesSelector(apiRef);\n    return new Map(visibleSortedRows.map(row => [row.id, row.model]));\n  }, [apiRef]);\n  const filterApi = {\n    setFilterLinkOperator,\n    unstable_applyFilters: applyFilters,\n    deleteFilterItem,\n    upsertFilterItem,\n    upsertFilterItems,\n    setFilterModel,\n    showFilterPanel,\n    hideFilterPanel,\n    getVisibleRowModels,\n    setQuickFilterValues\n  };\n  useGridApiMethod(apiRef, filterApi, 'GridFilterApi');\n  /**\n   * PRE-PROCESSING\n   */\n\n  const stateExportPreProcessing = React.useCallback((prevState, context) => {\n    var _props$initialState2, _props$initialState2$;\n\n    const filterModelToExport = gridFilterModelSelector(apiRef);\n    const shouldExportFilterModel = // Always export if the `exportOnlyDirtyModels` property is activated\n    !context.exportOnlyDirtyModels || // Always export if the model is controlled\n    props.filterModel != null || // Always export if the model has been initialized\n    ((_props$initialState2 = props.initialState) == null ? void 0 : (_props$initialState2$ = _props$initialState2.filter) == null ? void 0 : _props$initialState2$.filterModel) != null || // Export if the model is not equal to the default value\n    !isDeepEqual(filterModelToExport, getDefaultGridFilterModel());\n\n    if (!shouldExportFilterModel) {\n      return prevState;\n    }\n\n    return _extends({}, prevState, {\n      filter: {\n        filterModel: filterModelToExport\n      }\n    });\n  }, [apiRef, props.filterModel, (_props$initialState3 = props.initialState) == null ? void 0 : (_props$initialState3$ = _props$initialState3.filter) == null ? void 0 : _props$initialState3$.filterModel]);\n  const stateRestorePreProcessing = React.useCallback((params, context) => {\n    var _context$stateToResto;\n\n    const filterModel = (_context$stateToResto = context.stateToRestore.filter) == null ? void 0 : _context$stateToResto.filterModel;\n\n    if (filterModel == null) {\n      return params;\n    }\n\n    apiRef.current.unstable_updateControlState('filter', mergeStateWithFilterModel(filterModel, props.disableMultipleColumnsFiltering, apiRef), 'restoreState');\n    return _extends({}, params, {\n      callbacks: [...params.callbacks, apiRef.current.unstable_applyFilters]\n    });\n  }, [apiRef, props.disableMultipleColumnsFiltering]);\n  const preferencePanelPreProcessing = React.useCallback((initialValue, value) => {\n    if (value === GridPreferencePanelsValue.filters) {\n      var _props$componentsProp;\n\n      const FilterPanel = props.components.FilterPanel;\n      return /*#__PURE__*/_jsx(FilterPanel, _extends({}, (_props$componentsProp = props.componentsProps) == null ? void 0 : _props$componentsProp.filterPanel));\n    }\n\n    return initialValue;\n  }, [props.components.FilterPanel, (_props$componentsProp2 = props.componentsProps) == null ? void 0 : _props$componentsProp2.filterPanel]);\n  const flatFilteringMethod = React.useCallback(params => {\n    if (props.filterMode === GridFeatureModeConstant.client && params.isRowMatchingFilters) {\n      const rowIds = gridRowIdsSelector(apiRef);\n      const filteredRowsLookup = {};\n\n      for (let i = 0; i < rowIds.length; i += 1) {\n        const rowId = rowIds[i];\n        let isRowPassing;\n\n        if (typeof rowId === 'string' && rowId.startsWith('auto-generated-group-footer')) {\n          isRowPassing = true;\n        } else {\n          const {\n            passingFilterItems,\n            passingQuickFilterValues\n          } = params.isRowMatchingFilters(rowId);\n          isRowPassing = passFilterLogic([passingFilterItems], [passingQuickFilterValues], params.filterModel, apiRef);\n        }\n\n        filteredRowsLookup[rowId] = isRowPassing;\n      }\n\n      return {\n        filteredRowsLookup,\n        // For flat tree, the `visibleRowsLookup` and the `filteredRowsLookup` since no row is collapsed.\n        visibleRowsLookup: filteredRowsLookup,\n        filteredDescendantCountLookup: {}\n      };\n    }\n\n    return {\n      visibleRowsLookup: {},\n      filteredRowsLookup: {},\n      filteredDescendantCountLookup: {}\n    };\n  }, [apiRef, props.filterMode]);\n  useGridRegisterPipeProcessor(apiRef, 'exportState', stateExportPreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'restoreState', stateRestorePreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'preferencePanel', preferencePanelPreProcessing);\n  useGridRegisterStrategyProcessor(apiRef, GRID_DEFAULT_STRATEGY, 'filtering', flatFilteringMethod);\n  /**\n   * EVENTS\n   */\n\n  const handleColumnsChange = React.useCallback(() => {\n    logger.debug('onColUpdated - GridColumns changed, applying filters');\n    const filterModel = gridFilterModelSelector(apiRef);\n    const filterableColumnsLookup = gridFilterableColumnLookupSelector(apiRef);\n    const newFilterItems = filterModel.items.filter(item => item.columnField && filterableColumnsLookup[item.columnField]);\n\n    if (newFilterItems.length < filterModel.items.length) {\n      apiRef.current.setFilterModel(_extends({}, filterModel, {\n        items: newFilterItems\n      }));\n    }\n  }, [apiRef, logger]);\n  const handleStrategyProcessorChange = React.useCallback(methodName => {\n    if (methodName === 'filtering') {\n      apiRef.current.unstable_applyFilters();\n    }\n  }, [apiRef]); // Do not call `apiRef.current.forceUpdate` to avoid re-render before updating the sorted rows.\n  // Otherwise, the state is not consistent during the render\n\n  useGridApiEventHandler(apiRef, 'rowsSet', updateFilteredRows);\n  useGridApiEventHandler(apiRef, 'rowExpansionChange', apiRef.current.unstable_applyFilters);\n  useGridApiEventHandler(apiRef, 'columnsChange', handleColumnsChange);\n  useGridApiEventHandler(apiRef, 'activeStrategyProcessorChange', handleStrategyProcessorChange);\n  /**\n   * 1ST RENDER\n   */\n\n  useFirstRender(() => {\n    apiRef.current.unstable_applyFilters();\n  });\n  /**\n   * EFFECTS\n   */\n\n  React.useEffect(() => {\n    if (props.filterModel !== undefined) {\n      apiRef.current.setFilterModel(props.filterModel);\n    }\n  }, [apiRef, logger, props.filterModel]);\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}