{"ast":null,"code":"import _toConsumableArray from \"/Users/guilherme/Downloads/react-loan-calculator-main/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _slicedToArray from \"/Users/guilherme/Downloads/react-loan-calculator-main/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { useForkRef } from '@mui/material/utils';\nimport { styled } from '@mui/material/styles';\nimport { defaultMemoize } from 'reselect';\nimport { useGridApiContext } from '../../utils/useGridApiContext';\nimport { useGridSelector } from '../../utils/useGridSelector';\nimport { gridVisibleColumnDefinitionsSelector, gridColumnPositionsSelector } from '../columns/gridColumnsSelector';\nimport { gridTabIndexColumnHeaderSelector, gridTabIndexCellSelector, gridFocusColumnHeaderSelector } from '../focus/gridFocusStateSelector';\nimport { gridDensityHeaderHeightSelector, gridDensityHeaderGroupingMaxDepthSelector, gridDensityTotalHeaderHeightSelector } from '../density/densitySelector';\nimport { gridFilterActiveItemsLookupSelector } from '../filter/gridFilterSelector';\nimport { gridSortColumnLookupSelector } from '../sorting/gridSortingSelector';\nimport { gridColumnMenuSelector } from '../columnMenu/columnMenuSelector';\nimport { useGridRootProps } from '../../utils/useGridRootProps';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { GridColumnHeaderItem } from '../../../components/columnHeaders/GridColumnHeaderItem';\nimport { getFirstColumnIndexToRender } from '../columns/gridColumnsUtils';\nimport { useGridVisibleRows } from '../../utils/useGridVisibleRows';\nimport { getRenderableIndexes } from '../virtualization/useGridVirtualScroller';\nimport { GridColumnGroupHeader } from '../../../components/columnHeaders/GridColumnGroupHeader';\nimport { isDeepEqual } from '../../../utils/utils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n// TODO: add the possibility to switch this value if needed for customization\nvar MERGE_EMPTY_CELLS = true;\nvar GridColumnHeaderRow = styled('div', {\n  name: 'MuiDataGrid',\n  slot: 'ColumnHeaderRow',\n  overridesResolver: function overridesResolver(props, styles) {\n    return styles.columnHeaderRow;\n  }\n})(function () {\n  return {\n    display: 'flex'\n  };\n});\nfunction isUIEvent(event) {\n  return !!event.target;\n}\nexport var useGridColumnHeaders = function useGridColumnHeaders(props) {\n  var innerRefProp = props.innerRef,\n    _props$minColumnIndex = props.minColumnIndex,\n    minColumnIndex = _props$minColumnIndex === void 0 ? 0 : _props$minColumnIndex;\n  var _React$useState = React.useState(''),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    dragCol = _React$useState2[0],\n    setDragCol = _React$useState2[1];\n  var _React$useState3 = React.useState(''),\n    _React$useState4 = _slicedToArray(_React$useState3, 2),\n    resizeCol = _React$useState4[0],\n    setResizeCol = _React$useState4[1];\n  var apiRef = useGridApiContext();\n  var visibleColumns = useGridSelector(apiRef, gridVisibleColumnDefinitionsSelector);\n  var columnPositions = useGridSelector(apiRef, gridColumnPositionsSelector);\n  var tabIndexState = useGridSelector(apiRef, gridTabIndexColumnHeaderSelector);\n  var cellTabIndexState = useGridSelector(apiRef, gridTabIndexCellSelector);\n  var columnHeaderFocus = useGridSelector(apiRef, gridFocusColumnHeaderSelector);\n  var headerHeight = useGridSelector(apiRef, gridDensityHeaderHeightSelector);\n  var headerGroupingMaxDepth = useGridSelector(apiRef, gridDensityHeaderGroupingMaxDepthSelector);\n  var totalHeaderHeight = useGridSelector(apiRef, gridDensityTotalHeaderHeightSelector);\n  var filterColumnLookup = useGridSelector(apiRef, gridFilterActiveItemsLookupSelector);\n  var sortColumnLookup = useGridSelector(apiRef, gridSortColumnLookupSelector);\n  var columnMenuState = useGridSelector(apiRef, gridColumnMenuSelector);\n  var rootProps = useGridRootProps();\n  var innerRef = React.useRef(null);\n  var handleInnerRef = useForkRef(innerRefProp, innerRef);\n  var _React$useState5 = React.useState(null),\n    _React$useState6 = _slicedToArray(_React$useState5, 2),\n    renderContext = _React$useState6[0],\n    setRenderContext = _React$useState6[1];\n  var prevRenderContext = React.useRef(renderContext);\n  var prevScrollLeft = React.useRef(0);\n  var currentPage = useGridVisibleRows(apiRef, rootProps);\n  React.useEffect(function () {\n    apiRef.current.columnHeadersContainerElementRef.current.scrollLeft = 0;\n  }, [apiRef]); // memoize `getFirstColumnIndexToRender`, since it's called on scroll\n\n  var getFirstColumnIndexToRenderRef = React.useRef(defaultMemoize(getFirstColumnIndexToRender, {\n    equalityCheck: function equalityCheck(a, b) {\n      return ['firstColumnIndex', 'minColumnIndex', 'columnBuffer'].every(function (key) {\n        return a[key] === b[key];\n      });\n    }\n  }));\n  var updateInnerPosition = React.useCallback(function (nextRenderContext) {\n    var _getRenderableIndexes = getRenderableIndexes({\n        firstIndex: nextRenderContext.firstRowIndex,\n        lastIndex: nextRenderContext.lastRowIndex,\n        minFirstIndex: 0,\n        maxLastIndex: currentPage.rows.length,\n        buffer: rootProps.rowBuffer\n      }),\n      _getRenderableIndexes2 = _slicedToArray(_getRenderableIndexes, 2),\n      firstRowToRender = _getRenderableIndexes2[0],\n      lastRowToRender = _getRenderableIndexes2[1];\n    var firstColumnToRender = getFirstColumnIndexToRenderRef.current({\n      firstColumnIndex: nextRenderContext.firstColumnIndex,\n      minColumnIndex: minColumnIndex,\n      columnBuffer: rootProps.columnBuffer,\n      firstRowToRender: firstRowToRender,\n      lastRowToRender: lastRowToRender,\n      apiRef: apiRef,\n      visibleRows: currentPage.rows\n    });\n    var offset = firstColumnToRender > 0 ? prevScrollLeft.current - columnPositions[firstColumnToRender] : prevScrollLeft.current;\n    innerRef.current.style.transform = \"translate3d(\".concat(-offset, \"px, 0px, 0px)\");\n  }, [columnPositions, minColumnIndex, rootProps.columnBuffer, apiRef, currentPage.rows, rootProps.rowBuffer]);\n  React.useLayoutEffect(function () {\n    if (renderContext) {\n      updateInnerPosition(renderContext);\n    }\n  }, [renderContext, updateInnerPosition]);\n  var handleScroll = React.useCallback(function (_ref, event) {\n    var left = _ref.left,\n      _ref$renderContext = _ref.renderContext,\n      nextRenderContext = _ref$renderContext === void 0 ? null : _ref$renderContext;\n    var _prevRenderContext$cu, _prevRenderContext$cu2;\n    if (!innerRef.current) {\n      return;\n    } // Ignore vertical scroll.\n    // Excepts the first event which sets the previous render context.\n\n    if (prevScrollLeft.current === left && ((_prevRenderContext$cu = prevRenderContext.current) == null ? void 0 : _prevRenderContext$cu.firstColumnIndex) === (nextRenderContext == null ? void 0 : nextRenderContext.firstColumnIndex) && ((_prevRenderContext$cu2 = prevRenderContext.current) == null ? void 0 : _prevRenderContext$cu2.lastColumnIndex) === (nextRenderContext == null ? void 0 : nextRenderContext.lastColumnIndex)) {\n      return;\n    }\n    prevScrollLeft.current = left; // We can only update the position when we guarantee that the render context has been\n    // rendered. This is achieved using ReactDOM.flushSync or when the context doesn't change.\n\n    var canUpdateInnerPosition = false;\n    if (nextRenderContext !== prevRenderContext.current || !prevRenderContext.current) {\n      // ReactDOM.flushSync cannot be called on `scroll` events fired inside effects\n      if (isUIEvent(event)) {\n        // To prevent flickering, the inner position can only be updated after the new context has\n        // been rendered. ReactDOM.flushSync ensures that the state changes will happen before\n        // updating the position.\n        ReactDOM.flushSync(function () {\n          setRenderContext(nextRenderContext);\n        });\n        canUpdateInnerPosition = true;\n      } else {\n        setRenderContext(nextRenderContext);\n      }\n      prevRenderContext.current = nextRenderContext;\n    } else {\n      canUpdateInnerPosition = true;\n    } // Pass directly the render context to avoid waiting for the next render\n\n    if (nextRenderContext && canUpdateInnerPosition) {\n      updateInnerPosition(nextRenderContext);\n    }\n  }, [updateInnerPosition]);\n  var handleColumnResizeStart = React.useCallback(function (params) {\n    return setResizeCol(params.field);\n  }, []);\n  var handleColumnResizeStop = React.useCallback(function () {\n    return setResizeCol('');\n  }, []);\n  var handleColumnReorderStart = React.useCallback(function (params) {\n    return setDragCol(params.field);\n  }, []);\n  var handleColumnReorderStop = React.useCallback(function () {\n    return setDragCol('');\n  }, []);\n  useGridApiEventHandler(apiRef, 'columnResizeStart', handleColumnResizeStart);\n  useGridApiEventHandler(apiRef, 'columnResizeStop', handleColumnResizeStop);\n  useGridApiEventHandler(apiRef, 'columnHeaderDragStart', handleColumnReorderStart);\n  useGridApiEventHandler(apiRef, 'columnHeaderDragEnd', handleColumnReorderStop);\n  useGridApiEventHandler(apiRef, 'rowsScroll', handleScroll); // Helper for computation common between getColumnHeaders and getColumnGroupHeaders\n\n  var getColumnsToRender = function getColumnsToRender(params) {\n    var _ref2 = params || {},\n      _ref2$renderContext = _ref2.renderContext,\n      nextRenderContext = _ref2$renderContext === void 0 ? renderContext : _ref2$renderContext,\n      _ref2$minFirstColumn = _ref2.minFirstColumn,\n      minFirstColumn = _ref2$minFirstColumn === void 0 ? minColumnIndex : _ref2$minFirstColumn,\n      _ref2$maxLastColumn = _ref2.maxLastColumn,\n      maxLastColumn = _ref2$maxLastColumn === void 0 ? visibleColumns.length : _ref2$maxLastColumn;\n    if (!nextRenderContext) {\n      return null;\n    }\n    var _getRenderableIndexes3 = getRenderableIndexes({\n        firstIndex: nextRenderContext.firstRowIndex,\n        lastIndex: nextRenderContext.lastRowIndex,\n        minFirstIndex: 0,\n        maxLastIndex: currentPage.rows.length,\n        buffer: rootProps.rowBuffer\n      }),\n      _getRenderableIndexes4 = _slicedToArray(_getRenderableIndexes3, 2),\n      firstRowToRender = _getRenderableIndexes4[0],\n      lastRowToRender = _getRenderableIndexes4[1];\n    var firstColumnToRender = getFirstColumnIndexToRenderRef.current({\n      firstColumnIndex: nextRenderContext.firstColumnIndex,\n      minColumnIndex: minFirstColumn,\n      columnBuffer: rootProps.columnBuffer,\n      apiRef: apiRef,\n      firstRowToRender: firstRowToRender,\n      lastRowToRender: lastRowToRender,\n      visibleRows: currentPage.rows\n    });\n    var lastColumnToRender = Math.min(nextRenderContext.lastColumnIndex + rootProps.columnBuffer, maxLastColumn);\n    var renderedColumns = visibleColumns.slice(firstColumnToRender, lastColumnToRender);\n    return {\n      renderedColumns: renderedColumns,\n      firstColumnToRender: firstColumnToRender,\n      lastColumnToRender: lastColumnToRender,\n      minFirstColumn: minFirstColumn,\n      maxLastColumn: maxLastColumn\n    };\n  };\n  var getColumnHeaders = function getColumnHeaders(params) {\n    var other = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var columnsToRender = getColumnsToRender(params);\n    if (columnsToRender == null) {\n      return null;\n    }\n    var renderedColumns = columnsToRender.renderedColumns,\n      firstColumnToRender = columnsToRender.firstColumnToRender;\n    var columns = [];\n    for (var i = 0; i < renderedColumns.length; i += 1) {\n      var column = renderedColumns[i];\n      var columnIndex = firstColumnToRender + i;\n      var isFirstColumn = columnIndex === 0;\n      var hasTabbableElement = !(tabIndexState === null && cellTabIndexState === null);\n      var tabIndex = tabIndexState !== null && tabIndexState.field === column.field || isFirstColumn && !hasTabbableElement ? 0 : -1;\n      var hasFocus = columnHeaderFocus !== null && columnHeaderFocus.field === column.field;\n      var open = columnMenuState.open && columnMenuState.field === column.field;\n      columns.push( /*#__PURE__*/_jsx(GridColumnHeaderItem, _extends({}, sortColumnLookup[column.field], {\n        columnMenuOpen: open,\n        filterItemsCounter: filterColumnLookup[column.field] && filterColumnLookup[column.field].length,\n        headerHeight: headerHeight,\n        isDragging: column.field === dragCol,\n        column: column,\n        colIndex: columnIndex,\n        isResizing: resizeCol === column.field,\n        isLastColumn: columnIndex === visibleColumns.length - 1,\n        extendRowFullWidth: !rootProps.disableExtendRowFullWidth,\n        hasFocus: hasFocus,\n        tabIndex: tabIndex\n      }, other), column.field));\n    }\n    return /*#__PURE__*/_jsx(GridColumnHeaderRow, {\n      role: \"row\",\n      \"aria-rowindex\": headerGroupingMaxDepth + 1,\n      ownerState: rootProps,\n      children: columns\n    });\n  };\n  var getParents = function getParents() {\n    var path = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    var depth = arguments.length > 1 ? arguments[1] : undefined;\n    return path.slice(0, depth + 1);\n  };\n  var getColumnGroupHeaders = function getColumnGroupHeaders(params) {\n    if (headerGroupingMaxDepth === 0) {\n      return null;\n    }\n    var columnsToRender = getColumnsToRender(params);\n    if (columnsToRender == null || columnsToRender.renderedColumns.length === 0) {\n      return null;\n    }\n    var renderedColumns = columnsToRender.renderedColumns,\n      firstColumnToRender = columnsToRender.firstColumnToRender,\n      lastColumnToRender = columnsToRender.lastColumnToRender,\n      maxLastColumn = columnsToRender.maxLastColumn;\n    var columns = [];\n    var headerToRender = [];\n    var _loop = function _loop(depth) {\n      // Initialize the header line with a grouping item containing all the columns on the left of the virtualization which are in the same group as the first group to render\n      var initialHeader = [];\n      var leftOverflow = 0;\n      var columnIndex = firstColumnToRender - 1;\n      var firstColumnToRenderGroup = (_visibleColumns$first = visibleColumns[firstColumnToRender]) == null ? void 0 : (_visibleColumns$first2 = _visibleColumns$first.groupPath) == null ? void 0 : _visibleColumns$first2[depth]; // The array of parent is used to manage empty grouping cell\n      // When two empty grouping cell are next to each other, we merge them if the belong to the same group.\n\n      var firstColumnToRenderGroupParents = getParents((_visibleColumns$first3 = visibleColumns[firstColumnToRender]) == null ? void 0 : _visibleColumns$first3.groupPath, depth);\n      while (firstColumnToRenderGroup !== null && columnIndex >= minColumnIndex && (_visibleColumns$colum = visibleColumns[columnIndex]) != null && _visibleColumns$colum.groupPath && isDeepEqual(getParents((_visibleColumns$colum2 = visibleColumns[columnIndex]) == null ? void 0 : _visibleColumns$colum2.groupPath, depth), firstColumnToRenderGroupParents)) {\n        var column = visibleColumns[columnIndex];\n        leftOverflow += (_column$computedWidth = column.computedWidth) != null ? _column$computedWidth : 0;\n        if (initialHeader.length === 0) {\n          initialHeader.push({\n            width: (_column$computedWidth2 = column.computedWidth) != null ? _column$computedWidth2 : 0,\n            fields: [column.field],\n            groupId: firstColumnToRenderGroup,\n            groupParents: firstColumnToRenderGroupParents,\n            colIndex: columnIndex\n          });\n        } else {\n          initialHeader[0].width += (_column$computedWidth3 = column.computedWidth) != null ? _column$computedWidth3 : 0;\n          initialHeader[0].fields.push(column.field);\n          initialHeader[0].colIndex = columnIndex;\n        }\n        columnIndex -= 1;\n      }\n      var depthInfo = renderedColumns.reduce(function (aggregated, column, i) {\n        var _column$computedWidth7;\n        var lastItem = aggregated[aggregated.length - 1];\n        if (column.groupPath && column.groupPath.length > depth) {\n          var _column$computedWidth5;\n          if (lastItem && lastItem.groupId === column.groupPath[depth]) {\n            var _column$computedWidth4;\n\n            // Merge with the previous columns\n            return [].concat(_toConsumableArray(aggregated.slice(0, aggregated.length - 1)), [_extends({}, lastItem, {\n              width: lastItem.width + ((_column$computedWidth4 = column.computedWidth) != null ? _column$computedWidth4 : 0),\n              fields: [].concat(_toConsumableArray(lastItem.fields), [column.field])\n            })]);\n          } // Create a new grouping\n\n          return [].concat(_toConsumableArray(aggregated), [{\n            groupId: column.groupPath[depth],\n            groupParents: getParents(column.groupPath, depth),\n            width: (_column$computedWidth5 = column.computedWidth) != null ? _column$computedWidth5 : 0,\n            fields: [column.field],\n            colIndex: firstColumnToRender + i\n          }]);\n        }\n        if (MERGE_EMPTY_CELLS && lastItem && lastItem.groupId === null && isDeepEqual(getParents(column.groupPath, depth), lastItem.groupParents)) {\n          var _column$computedWidth6;\n\n          // We merge with previous column\n          return [].concat(_toConsumableArray(aggregated.slice(0, aggregated.length - 1)), [_extends({}, lastItem, {\n            width: lastItem.width + ((_column$computedWidth6 = column.computedWidth) != null ? _column$computedWidth6 : 0),\n            fields: [].concat(_toConsumableArray(lastItem.fields), [column.field])\n          })]);\n        } // We create new empty cell\n\n        return [].concat(_toConsumableArray(aggregated), [{\n          groupId: null,\n          groupParents: getParents(column.groupPath, depth),\n          width: (_column$computedWidth7 = column.computedWidth) != null ? _column$computedWidth7 : 0,\n          fields: [column.field],\n          colIndex: firstColumnToRender + i\n        }]);\n      }, initialHeader);\n      columnIndex = lastColumnToRender;\n      var lastColumnToRenderGroup = depthInfo[depthInfo.length - 1].groupId;\n      while (lastColumnToRenderGroup !== null && columnIndex < maxLastColumn && (_visibleColumns$colum3 = visibleColumns[columnIndex]) != null && _visibleColumns$colum3.groupPath && ((_visibleColumns$colum4 = visibleColumns[columnIndex]) == null ? void 0 : (_visibleColumns$colum5 = _visibleColumns$colum4.groupPath) == null ? void 0 : _visibleColumns$colum5[depth]) === lastColumnToRenderGroup) {\n        var _column = visibleColumns[columnIndex];\n        depthInfo[depthInfo.length - 1].width += (_column$computedWidth8 = _column.computedWidth) != null ? _column$computedWidth8 : 0;\n        depthInfo[depthInfo.length - 1].fields.push(_column.field);\n        columnIndex += 1;\n      }\n      headerToRender.push({\n        leftOverflow: leftOverflow,\n        elements: _toConsumableArray(depthInfo)\n      });\n    };\n    for (var depth = 0; depth < headerGroupingMaxDepth; depth += 1) {\n      var _visibleColumns$first, _visibleColumns$first2, _visibleColumns$first3, _visibleColumns$colum, _visibleColumns$colum2, _column$computedWidth, _column$computedWidth2, _column$computedWidth3, _visibleColumns$colum3, _visibleColumns$colum4, _visibleColumns$colum5, _column$computedWidth8;\n      _loop(depth);\n    }\n    headerToRender.forEach(function (depthInfo, depthIndex) {\n      columns.push( /*#__PURE__*/_jsx(GridColumnHeaderRow, {\n        style: {\n          height: \"\".concat(headerHeight, \"px\"),\n          transform: \"translateX(-\".concat(depthInfo.leftOverflow, \"px)\")\n        },\n        role: \"row\",\n        \"aria-rowindex\": depthIndex + 1,\n        ownerState: rootProps,\n        children: depthInfo.elements.map(function (_ref3, groupIndex) {\n          var groupId = _ref3.groupId,\n            width = _ref3.width,\n            fields = _ref3.fields,\n            colIndex = _ref3.colIndex;\n          return /*#__PURE__*/_jsx(GridColumnGroupHeader, {\n            groupId: groupId,\n            width: width,\n            fields: fields,\n            colIndex: colIndex,\n            depth: depthIndex,\n            isLastColumn: colIndex === visibleColumns.length - fields.length,\n            extendRowFullWidth: !rootProps.disableExtendRowFullWidth,\n            maxDepth: headerToRender.length,\n            height: headerHeight\n          }, groupIndex);\n        })\n      }, depthIndex));\n    });\n    return columns;\n  };\n  var rootStyle = {\n    minHeight: totalHeaderHeight,\n    maxHeight: totalHeaderHeight,\n    lineHeight: \"\".concat(headerHeight, \"px\")\n  };\n  return {\n    renderContext: renderContext,\n    getColumnHeaders: getColumnHeaders,\n    getColumnGroupHeaders: getColumnGroupHeaders,\n    isDragging: !!dragCol,\n    getRootProps: function getRootProps() {\n      var other = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return _extends({\n        style: rootStyle\n      }, other);\n    },\n    getInnerProps: function getInnerProps() {\n      return {\n        ref: handleInnerRef,\n        role: 'rowgroup'\n      };\n    }\n  };\n};","map":{"version":3,"names":["_extends","React","ReactDOM","useForkRef","styled","defaultMemoize","useGridApiContext","useGridSelector","gridVisibleColumnDefinitionsSelector","gridColumnPositionsSelector","gridTabIndexColumnHeaderSelector","gridTabIndexCellSelector","gridFocusColumnHeaderSelector","gridDensityHeaderHeightSelector","gridDensityHeaderGroupingMaxDepthSelector","gridDensityTotalHeaderHeightSelector","gridFilterActiveItemsLookupSelector","gridSortColumnLookupSelector","gridColumnMenuSelector","useGridRootProps","useGridApiEventHandler","GridColumnHeaderItem","getFirstColumnIndexToRender","useGridVisibleRows","getRenderableIndexes","GridColumnGroupHeader","isDeepEqual","jsx","_jsx","MERGE_EMPTY_CELLS","GridColumnHeaderRow","name","slot","overridesResolver","props","styles","columnHeaderRow","display","isUIEvent","event","target","useGridColumnHeaders","innerRefProp","innerRef","_props$minColumnIndex","minColumnIndex","_React$useState","useState","_React$useState2","_slicedToArray","dragCol","setDragCol","_React$useState3","_React$useState4","resizeCol","setResizeCol","apiRef","visibleColumns","columnPositions","tabIndexState","cellTabIndexState","columnHeaderFocus","headerHeight","headerGroupingMaxDepth","totalHeaderHeight","filterColumnLookup","sortColumnLookup","columnMenuState","rootProps","useRef","handleInnerRef","_React$useState5","_React$useState6","renderContext","setRenderContext","prevRenderContext","prevScrollLeft","currentPage","useEffect","current","columnHeadersContainerElementRef","scrollLeft","getFirstColumnIndexToRenderRef","equalityCheck","a","b","every","key","updateInnerPosition","useCallback","nextRenderContext","_getRenderableIndexes","firstIndex","firstRowIndex","lastIndex","lastRowIndex","minFirstIndex","maxLastIndex","rows","length","buffer","rowBuffer","_getRenderableIndexes2","firstRowToRender","lastRowToRender","firstColumnToRender","firstColumnIndex","columnBuffer","visibleRows","offset","style","transform","concat","useLayoutEffect","handleScroll","_ref","left","_ref$renderContext","_prevRenderContext$cu","_prevRenderContext$cu2","lastColumnIndex","canUpdateInnerPosition","flushSync","handleColumnResizeStart","params","field","handleColumnResizeStop","handleColumnReorderStart","handleColumnReorderStop","getColumnsToRender","_ref2","_ref2$renderContext","_ref2$minFirstColumn","minFirstColumn","_ref2$maxLastColumn","maxLastColumn","_getRenderableIndexes3","_getRenderableIndexes4","lastColumnToRender","Math","min","renderedColumns","slice","getColumnHeaders","other","arguments","undefined","columnsToRender","columns","i","column","columnIndex","isFirstColumn","hasTabbableElement","tabIndex","hasFocus","open","push","columnMenuOpen","filterItemsCounter","isDragging","colIndex","isResizing","isLastColumn","extendRowFullWidth","disableExtendRowFullWidth","role","ownerState","children","getParents","path","depth","getColumnGroupHeaders","headerToRender","_loop","initialHeader","leftOverflow","firstColumnToRenderGroup","_visibleColumns$first","_visibleColumns$first2","groupPath","firstColumnToRenderGroupParents","_visibleColumns$first3","_visibleColumns$colum","_visibleColumns$colum2","_column$computedWidth","computedWidth","width","_column$computedWidth2","fields","groupId","groupParents","_column$computedWidth3","depthInfo","reduce","aggregated","_column$computedWidth7","lastItem","_column$computedWidth5","_column$computedWidth4","_toConsumableArray","_column$computedWidth6","lastColumnToRenderGroup","_visibleColumns$colum3","_visibleColumns$colum4","_visibleColumns$colum5","_column$computedWidth8","elements","forEach","depthIndex","height","map","_ref3","groupIndex","maxDepth","rootStyle","minHeight","maxHeight","lineHeight","getRootProps","getInnerProps","ref"],"sources":["/Users/guilherme/Downloads/react-loan-calculator-main/node_modules/@mui/x-data-grid/hooks/features/columnHeaders/useGridColumnHeaders.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { useForkRef } from '@mui/material/utils';\nimport { styled } from '@mui/material/styles';\nimport { defaultMemoize } from 'reselect';\nimport { useGridApiContext } from '../../utils/useGridApiContext';\nimport { useGridSelector } from '../../utils/useGridSelector';\nimport { gridVisibleColumnDefinitionsSelector, gridColumnPositionsSelector } from '../columns/gridColumnsSelector';\nimport { gridTabIndexColumnHeaderSelector, gridTabIndexCellSelector, gridFocusColumnHeaderSelector } from '../focus/gridFocusStateSelector';\nimport { gridDensityHeaderHeightSelector, gridDensityHeaderGroupingMaxDepthSelector, gridDensityTotalHeaderHeightSelector } from '../density/densitySelector';\nimport { gridFilterActiveItemsLookupSelector } from '../filter/gridFilterSelector';\nimport { gridSortColumnLookupSelector } from '../sorting/gridSortingSelector';\nimport { gridColumnMenuSelector } from '../columnMenu/columnMenuSelector';\nimport { useGridRootProps } from '../../utils/useGridRootProps';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { GridColumnHeaderItem } from '../../../components/columnHeaders/GridColumnHeaderItem';\nimport { getFirstColumnIndexToRender } from '../columns/gridColumnsUtils';\nimport { useGridVisibleRows } from '../../utils/useGridVisibleRows';\nimport { getRenderableIndexes } from '../virtualization/useGridVirtualScroller';\nimport { GridColumnGroupHeader } from '../../../components/columnHeaders/GridColumnGroupHeader';\nimport { isDeepEqual } from '../../../utils/utils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n// TODO: add the possibility to switch this value if needed for customization\nconst MERGE_EMPTY_CELLS = true;\nconst GridColumnHeaderRow = styled('div', {\n  name: 'MuiDataGrid',\n  slot: 'ColumnHeaderRow',\n  overridesResolver: (props, styles) => styles.columnHeaderRow\n})(() => ({\n  display: 'flex'\n}));\n\nfunction isUIEvent(event) {\n  return !!event.target;\n}\n\nexport const useGridColumnHeaders = props => {\n  const {\n    innerRef: innerRefProp,\n    minColumnIndex = 0\n  } = props;\n  const [dragCol, setDragCol] = React.useState('');\n  const [resizeCol, setResizeCol] = React.useState('');\n  const apiRef = useGridApiContext();\n  const visibleColumns = useGridSelector(apiRef, gridVisibleColumnDefinitionsSelector);\n  const columnPositions = useGridSelector(apiRef, gridColumnPositionsSelector);\n  const tabIndexState = useGridSelector(apiRef, gridTabIndexColumnHeaderSelector);\n  const cellTabIndexState = useGridSelector(apiRef, gridTabIndexCellSelector);\n  const columnHeaderFocus = useGridSelector(apiRef, gridFocusColumnHeaderSelector);\n  const headerHeight = useGridSelector(apiRef, gridDensityHeaderHeightSelector);\n  const headerGroupingMaxDepth = useGridSelector(apiRef, gridDensityHeaderGroupingMaxDepthSelector);\n  const totalHeaderHeight = useGridSelector(apiRef, gridDensityTotalHeaderHeightSelector);\n  const filterColumnLookup = useGridSelector(apiRef, gridFilterActiveItemsLookupSelector);\n  const sortColumnLookup = useGridSelector(apiRef, gridSortColumnLookupSelector);\n  const columnMenuState = useGridSelector(apiRef, gridColumnMenuSelector);\n  const rootProps = useGridRootProps();\n  const innerRef = React.useRef(null);\n  const handleInnerRef = useForkRef(innerRefProp, innerRef);\n  const [renderContext, setRenderContext] = React.useState(null);\n  const prevRenderContext = React.useRef(renderContext);\n  const prevScrollLeft = React.useRef(0);\n  const currentPage = useGridVisibleRows(apiRef, rootProps);\n  React.useEffect(() => {\n    apiRef.current.columnHeadersContainerElementRef.current.scrollLeft = 0;\n  }, [apiRef]); // memoize `getFirstColumnIndexToRender`, since it's called on scroll\n\n  const getFirstColumnIndexToRenderRef = React.useRef(defaultMemoize(getFirstColumnIndexToRender, {\n    equalityCheck: (a, b) => ['firstColumnIndex', 'minColumnIndex', 'columnBuffer'].every(key => a[key] === b[key])\n  }));\n  const updateInnerPosition = React.useCallback(nextRenderContext => {\n    const [firstRowToRender, lastRowToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstRowIndex,\n      lastIndex: nextRenderContext.lastRowIndex,\n      minFirstIndex: 0,\n      maxLastIndex: currentPage.rows.length,\n      buffer: rootProps.rowBuffer\n    });\n    const firstColumnToRender = getFirstColumnIndexToRenderRef.current({\n      firstColumnIndex: nextRenderContext.firstColumnIndex,\n      minColumnIndex,\n      columnBuffer: rootProps.columnBuffer,\n      firstRowToRender,\n      lastRowToRender,\n      apiRef,\n      visibleRows: currentPage.rows\n    });\n    const offset = firstColumnToRender > 0 ? prevScrollLeft.current - columnPositions[firstColumnToRender] : prevScrollLeft.current;\n    innerRef.current.style.transform = `translate3d(${-offset}px, 0px, 0px)`;\n  }, [columnPositions, minColumnIndex, rootProps.columnBuffer, apiRef, currentPage.rows, rootProps.rowBuffer]);\n  React.useLayoutEffect(() => {\n    if (renderContext) {\n      updateInnerPosition(renderContext);\n    }\n  }, [renderContext, updateInnerPosition]);\n  const handleScroll = React.useCallback(({\n    left,\n    renderContext: nextRenderContext = null\n  }, event) => {\n    var _prevRenderContext$cu, _prevRenderContext$cu2;\n\n    if (!innerRef.current) {\n      return;\n    } // Ignore vertical scroll.\n    // Excepts the first event which sets the previous render context.\n\n\n    if (prevScrollLeft.current === left && ((_prevRenderContext$cu = prevRenderContext.current) == null ? void 0 : _prevRenderContext$cu.firstColumnIndex) === (nextRenderContext == null ? void 0 : nextRenderContext.firstColumnIndex) && ((_prevRenderContext$cu2 = prevRenderContext.current) == null ? void 0 : _prevRenderContext$cu2.lastColumnIndex) === (nextRenderContext == null ? void 0 : nextRenderContext.lastColumnIndex)) {\n      return;\n    }\n\n    prevScrollLeft.current = left; // We can only update the position when we guarantee that the render context has been\n    // rendered. This is achieved using ReactDOM.flushSync or when the context doesn't change.\n\n    let canUpdateInnerPosition = false;\n\n    if (nextRenderContext !== prevRenderContext.current || !prevRenderContext.current) {\n      // ReactDOM.flushSync cannot be called on `scroll` events fired inside effects\n      if (isUIEvent(event)) {\n        // To prevent flickering, the inner position can only be updated after the new context has\n        // been rendered. ReactDOM.flushSync ensures that the state changes will happen before\n        // updating the position.\n        ReactDOM.flushSync(() => {\n          setRenderContext(nextRenderContext);\n        });\n        canUpdateInnerPosition = true;\n      } else {\n        setRenderContext(nextRenderContext);\n      }\n\n      prevRenderContext.current = nextRenderContext;\n    } else {\n      canUpdateInnerPosition = true;\n    } // Pass directly the render context to avoid waiting for the next render\n\n\n    if (nextRenderContext && canUpdateInnerPosition) {\n      updateInnerPosition(nextRenderContext);\n    }\n  }, [updateInnerPosition]);\n  const handleColumnResizeStart = React.useCallback(params => setResizeCol(params.field), []);\n  const handleColumnResizeStop = React.useCallback(() => setResizeCol(''), []);\n  const handleColumnReorderStart = React.useCallback(params => setDragCol(params.field), []);\n  const handleColumnReorderStop = React.useCallback(() => setDragCol(''), []);\n  useGridApiEventHandler(apiRef, 'columnResizeStart', handleColumnResizeStart);\n  useGridApiEventHandler(apiRef, 'columnResizeStop', handleColumnResizeStop);\n  useGridApiEventHandler(apiRef, 'columnHeaderDragStart', handleColumnReorderStart);\n  useGridApiEventHandler(apiRef, 'columnHeaderDragEnd', handleColumnReorderStop);\n  useGridApiEventHandler(apiRef, 'rowsScroll', handleScroll); // Helper for computation common between getColumnHeaders and getColumnGroupHeaders\n\n  const getColumnsToRender = params => {\n    const {\n      renderContext: nextRenderContext = renderContext,\n      minFirstColumn = minColumnIndex,\n      maxLastColumn = visibleColumns.length\n    } = params || {};\n\n    if (!nextRenderContext) {\n      return null;\n    }\n\n    const [firstRowToRender, lastRowToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstRowIndex,\n      lastIndex: nextRenderContext.lastRowIndex,\n      minFirstIndex: 0,\n      maxLastIndex: currentPage.rows.length,\n      buffer: rootProps.rowBuffer\n    });\n    const firstColumnToRender = getFirstColumnIndexToRenderRef.current({\n      firstColumnIndex: nextRenderContext.firstColumnIndex,\n      minColumnIndex: minFirstColumn,\n      columnBuffer: rootProps.columnBuffer,\n      apiRef,\n      firstRowToRender,\n      lastRowToRender,\n      visibleRows: currentPage.rows\n    });\n    const lastColumnToRender = Math.min(nextRenderContext.lastColumnIndex + rootProps.columnBuffer, maxLastColumn);\n    const renderedColumns = visibleColumns.slice(firstColumnToRender, lastColumnToRender);\n    return {\n      renderedColumns,\n      firstColumnToRender,\n      lastColumnToRender,\n      minFirstColumn,\n      maxLastColumn\n    };\n  };\n\n  const getColumnHeaders = (params, other = {}) => {\n    const columnsToRender = getColumnsToRender(params);\n\n    if (columnsToRender == null) {\n      return null;\n    }\n\n    const {\n      renderedColumns,\n      firstColumnToRender\n    } = columnsToRender;\n    const columns = [];\n\n    for (let i = 0; i < renderedColumns.length; i += 1) {\n      const column = renderedColumns[i];\n      const columnIndex = firstColumnToRender + i;\n      const isFirstColumn = columnIndex === 0;\n      const hasTabbableElement = !(tabIndexState === null && cellTabIndexState === null);\n      const tabIndex = tabIndexState !== null && tabIndexState.field === column.field || isFirstColumn && !hasTabbableElement ? 0 : -1;\n      const hasFocus = columnHeaderFocus !== null && columnHeaderFocus.field === column.field;\n      const open = columnMenuState.open && columnMenuState.field === column.field;\n      columns.push( /*#__PURE__*/_jsx(GridColumnHeaderItem, _extends({}, sortColumnLookup[column.field], {\n        columnMenuOpen: open,\n        filterItemsCounter: filterColumnLookup[column.field] && filterColumnLookup[column.field].length,\n        headerHeight: headerHeight,\n        isDragging: column.field === dragCol,\n        column: column,\n        colIndex: columnIndex,\n        isResizing: resizeCol === column.field,\n        isLastColumn: columnIndex === visibleColumns.length - 1,\n        extendRowFullWidth: !rootProps.disableExtendRowFullWidth,\n        hasFocus: hasFocus,\n        tabIndex: tabIndex\n      }, other), column.field));\n    }\n\n    return /*#__PURE__*/_jsx(GridColumnHeaderRow, {\n      role: \"row\",\n      \"aria-rowindex\": headerGroupingMaxDepth + 1,\n      ownerState: rootProps,\n      children: columns\n    });\n  };\n\n  const getParents = (path = [], depth) => path.slice(0, depth + 1);\n\n  const getColumnGroupHeaders = params => {\n    if (headerGroupingMaxDepth === 0) {\n      return null;\n    }\n\n    const columnsToRender = getColumnsToRender(params);\n\n    if (columnsToRender == null || columnsToRender.renderedColumns.length === 0) {\n      return null;\n    }\n\n    const {\n      renderedColumns,\n      firstColumnToRender,\n      lastColumnToRender,\n      maxLastColumn\n    } = columnsToRender;\n    const columns = [];\n    const headerToRender = [];\n\n    for (let depth = 0; depth < headerGroupingMaxDepth; depth += 1) {\n      var _visibleColumns$first, _visibleColumns$first2, _visibleColumns$first3;\n\n      // Initialize the header line with a grouping item containing all the columns on the left of the virtualization which are in the same group as the first group to render\n      const initialHeader = [];\n      let leftOverflow = 0;\n      let columnIndex = firstColumnToRender - 1;\n      const firstColumnToRenderGroup = (_visibleColumns$first = visibleColumns[firstColumnToRender]) == null ? void 0 : (_visibleColumns$first2 = _visibleColumns$first.groupPath) == null ? void 0 : _visibleColumns$first2[depth]; // The array of parent is used to manage empty grouping cell\n      // When two empty grouping cell are next to each other, we merge them if the belong to the same group.\n\n      const firstColumnToRenderGroupParents = getParents((_visibleColumns$first3 = visibleColumns[firstColumnToRender]) == null ? void 0 : _visibleColumns$first3.groupPath, depth);\n\n      while (firstColumnToRenderGroup !== null && columnIndex >= minColumnIndex && (_visibleColumns$colum = visibleColumns[columnIndex]) != null && _visibleColumns$colum.groupPath && isDeepEqual(getParents((_visibleColumns$colum2 = visibleColumns[columnIndex]) == null ? void 0 : _visibleColumns$colum2.groupPath, depth), firstColumnToRenderGroupParents)) {\n        var _visibleColumns$colum, _visibleColumns$colum2, _column$computedWidth;\n\n        const column = visibleColumns[columnIndex];\n        leftOverflow += (_column$computedWidth = column.computedWidth) != null ? _column$computedWidth : 0;\n\n        if (initialHeader.length === 0) {\n          var _column$computedWidth2;\n\n          initialHeader.push({\n            width: (_column$computedWidth2 = column.computedWidth) != null ? _column$computedWidth2 : 0,\n            fields: [column.field],\n            groupId: firstColumnToRenderGroup,\n            groupParents: firstColumnToRenderGroupParents,\n            colIndex: columnIndex\n          });\n        } else {\n          var _column$computedWidth3;\n\n          initialHeader[0].width += (_column$computedWidth3 = column.computedWidth) != null ? _column$computedWidth3 : 0;\n          initialHeader[0].fields.push(column.field);\n          initialHeader[0].colIndex = columnIndex;\n        }\n\n        columnIndex -= 1;\n      }\n\n      const depthInfo = renderedColumns.reduce((aggregated, column, i) => {\n        var _column$computedWidth7;\n\n        const lastItem = aggregated[aggregated.length - 1];\n\n        if (column.groupPath && column.groupPath.length > depth) {\n          var _column$computedWidth5;\n\n          if (lastItem && lastItem.groupId === column.groupPath[depth]) {\n            var _column$computedWidth4;\n\n            // Merge with the previous columns\n            return [...aggregated.slice(0, aggregated.length - 1), _extends({}, lastItem, {\n              width: lastItem.width + ((_column$computedWidth4 = column.computedWidth) != null ? _column$computedWidth4 : 0),\n              fields: [...lastItem.fields, column.field]\n            })];\n          } // Create a new grouping\n\n\n          return [...aggregated, {\n            groupId: column.groupPath[depth],\n            groupParents: getParents(column.groupPath, depth),\n            width: (_column$computedWidth5 = column.computedWidth) != null ? _column$computedWidth5 : 0,\n            fields: [column.field],\n            colIndex: firstColumnToRender + i\n          }];\n        }\n\n        if (MERGE_EMPTY_CELLS && lastItem && lastItem.groupId === null && isDeepEqual(getParents(column.groupPath, depth), lastItem.groupParents)) {\n          var _column$computedWidth6;\n\n          // We merge with previous column\n          return [...aggregated.slice(0, aggregated.length - 1), _extends({}, lastItem, {\n            width: lastItem.width + ((_column$computedWidth6 = column.computedWidth) != null ? _column$computedWidth6 : 0),\n            fields: [...lastItem.fields, column.field]\n          })];\n        } // We create new empty cell\n\n\n        return [...aggregated, {\n          groupId: null,\n          groupParents: getParents(column.groupPath, depth),\n          width: (_column$computedWidth7 = column.computedWidth) != null ? _column$computedWidth7 : 0,\n          fields: [column.field],\n          colIndex: firstColumnToRender + i\n        }];\n      }, initialHeader);\n      columnIndex = lastColumnToRender;\n      const lastColumnToRenderGroup = depthInfo[depthInfo.length - 1].groupId;\n\n      while (lastColumnToRenderGroup !== null && columnIndex < maxLastColumn && (_visibleColumns$colum3 = visibleColumns[columnIndex]) != null && _visibleColumns$colum3.groupPath && ((_visibleColumns$colum4 = visibleColumns[columnIndex]) == null ? void 0 : (_visibleColumns$colum5 = _visibleColumns$colum4.groupPath) == null ? void 0 : _visibleColumns$colum5[depth]) === lastColumnToRenderGroup) {\n        var _visibleColumns$colum3, _visibleColumns$colum4, _visibleColumns$colum5, _column$computedWidth8;\n\n        const column = visibleColumns[columnIndex];\n        depthInfo[depthInfo.length - 1].width += (_column$computedWidth8 = column.computedWidth) != null ? _column$computedWidth8 : 0;\n        depthInfo[depthInfo.length - 1].fields.push(column.field);\n        columnIndex += 1;\n      }\n\n      headerToRender.push({\n        leftOverflow,\n        elements: [...depthInfo]\n      });\n    }\n\n    headerToRender.forEach((depthInfo, depthIndex) => {\n      columns.push( /*#__PURE__*/_jsx(GridColumnHeaderRow, {\n        style: {\n          height: `${headerHeight}px`,\n          transform: `translateX(-${depthInfo.leftOverflow}px)`\n        },\n        role: \"row\",\n        \"aria-rowindex\": depthIndex + 1,\n        ownerState: rootProps,\n        children: depthInfo.elements.map(({\n          groupId,\n          width,\n          fields,\n          colIndex\n        }, groupIndex) => {\n          return /*#__PURE__*/_jsx(GridColumnGroupHeader, {\n            groupId: groupId,\n            width: width,\n            fields: fields,\n            colIndex: colIndex,\n            depth: depthIndex,\n            isLastColumn: colIndex === visibleColumns.length - fields.length,\n            extendRowFullWidth: !rootProps.disableExtendRowFullWidth,\n            maxDepth: headerToRender.length,\n            height: headerHeight\n          }, groupIndex);\n        })\n      }, depthIndex));\n    });\n    return columns;\n  };\n\n  const rootStyle = {\n    minHeight: totalHeaderHeight,\n    maxHeight: totalHeaderHeight,\n    lineHeight: `${headerHeight}px`\n  };\n  return {\n    renderContext,\n    getColumnHeaders,\n    getColumnGroupHeaders,\n    isDragging: !!dragCol,\n    getRootProps: (other = {}) => _extends({\n      style: rootStyle\n    }, other),\n    getInnerProps: () => ({\n      ref: handleInnerRef,\n      role: 'rowgroup'\n    })\n  };\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}